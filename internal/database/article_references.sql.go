// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: article_references.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addArticleReferenceToProtocol = `-- name: AddArticleReferenceToProtocol :exec
INSERT INTO protocol_references_value (protocol_id, reference_id)
VALUES ($1, $2)
`

type AddArticleReferenceToProtocolParams struct {
	ProtocolID  uuid.UUID
	ReferenceID uuid.UUID
}

func (q *Queries) AddArticleReferenceToProtocol(ctx context.Context, arg AddArticleReferenceToProtocolParams) error {
	_, err := q.db.ExecContext(ctx, addArticleReferenceToProtocol, arg.ProtocolID, arg.ReferenceID)
	return err
}

const addManyArticleReferenceToProtocol = `-- name: AddManyArticleReferenceToProtocol :exec
INSERT INTO protocol_references_value (protocol_id, reference_id)
VALUES ($1::UUID[], $2::UUID[])
ON CONFLICT DO NOTHING
`

type AddManyArticleReferenceToProtocolParams struct {
	Column1 []uuid.UUID
	Column2 []uuid.UUID
}

func (q *Queries) AddManyArticleReferenceToProtocol(ctx context.Context, arg AddManyArticleReferenceToProtocolParams) error {
	_, err := q.db.ExecContext(ctx, addManyArticleReferenceToProtocol, pq.Array(arg.Column1), pq.Array(arg.Column2))
	return err
}

const createArticleReference = `-- name: CreateArticleReference :one
INSERT INTO article_references (title, authors, journal, year, joi, pmid)
VALUES ($1, $2, $3, $4, $5, $6)    
RETURNING id, created_at, updated_at, title, authors, journal, year, pmid, joi
`

type CreateArticleReferenceParams struct {
	Title   string
	Authors string
	Journal string
	Year    string
	Joi     string
	Pmid    string
}

func (q *Queries) CreateArticleReference(ctx context.Context, arg CreateArticleReferenceParams) (ArticleReference, error) {
	row := q.db.QueryRowContext(ctx, createArticleReference,
		arg.Title,
		arg.Authors,
		arg.Journal,
		arg.Year,
		arg.Joi,
		arg.Pmid,
	)
	var i ArticleReference
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Authors,
		&i.Journal,
		&i.Year,
		&i.Pmid,
		&i.Joi,
	)
	return i, err
}

const deleteArticleReference = `-- name: DeleteArticleReference :exec
DELETE FROM article_references
WHERE id = $1
`

func (q *Queries) DeleteArticleReference(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteArticleReference, id)
	return err
}

const getArticleReferenceByData = `-- name: GetArticleReferenceByData :one
SELECT id, created_at, updated_at, title, authors, journal, year, pmid, joi FROM article_references
WHERE title = $1 AND authors = $2 AND journal = $3 AND year = $4
`

type GetArticleReferenceByDataParams struct {
	Title   string
	Authors string
	Journal string
	Year    string
}

func (q *Queries) GetArticleReferenceByData(ctx context.Context, arg GetArticleReferenceByDataParams) (ArticleReference, error) {
	row := q.db.QueryRowContext(ctx, getArticleReferenceByData,
		arg.Title,
		arg.Authors,
		arg.Journal,
		arg.Year,
	)
	var i ArticleReference
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Authors,
		&i.Journal,
		&i.Year,
		&i.Pmid,
		&i.Joi,
	)
	return i, err
}

const getArticleReferenceByID = `-- name: GetArticleReferenceByID :one
SELECT id, created_at, updated_at, title, authors, journal, year, pmid, joi FROM article_references
WHERE id = $1
`

func (q *Queries) GetArticleReferenceByID(ctx context.Context, id uuid.UUID) (ArticleReference, error) {
	row := q.db.QueryRowContext(ctx, getArticleReferenceByID, id)
	var i ArticleReference
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Authors,
		&i.Journal,
		&i.Year,
		&i.Pmid,
		&i.Joi,
	)
	return i, err
}

const getArticleReferencesByProtocol = `-- name: GetArticleReferencesByProtocol :many
SELECT article_references.id, article_references.created_at, article_references.updated_at, article_references.title, article_references.authors, article_references.journal, article_references.year, article_references.pmid, article_references.joi
FROM article_references
JOIN protocol_references_value ON article_references.id = protocol_references_value.reference_id
WHERE protocol_references_value.protocol_id = $1
ORDER BY article_references.year DESC
`

func (q *Queries) GetArticleReferencesByProtocol(ctx context.Context, protocolID uuid.UUID) ([]ArticleReference, error) {
	rows, err := q.db.QueryContext(ctx, getArticleReferencesByProtocol, protocolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ArticleReference
	for rows.Next() {
		var i ArticleReference
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Authors,
			&i.Journal,
			&i.Year,
			&i.Pmid,
			&i.Joi,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeArticleReferenceFromProtocol = `-- name: RemoveArticleReferenceFromProtocol :exec
DELETE FROM protocol_references_value
WHERE protocol_id = $1 AND reference_id = $2
`

type RemoveArticleReferenceFromProtocolParams struct {
	ProtocolID  uuid.UUID
	ReferenceID uuid.UUID
}

func (q *Queries) RemoveArticleReferenceFromProtocol(ctx context.Context, arg RemoveArticleReferenceFromProtocolParams) error {
	_, err := q.db.ExecContext(ctx, removeArticleReferenceFromProtocol, arg.ProtocolID, arg.ReferenceID)
	return err
}

const updateArticleReference = `-- name: UpdateArticleReference :one
UPDATE article_references
SET
    updated_at = NOW(),
    title = $2,
    authors = $3,
    journal = $4,
    year = $5,
    joi = $6,
    pmid = $7    
WHERE id = $1
RETURNING id, created_at, updated_at, title, authors, journal, year, pmid, joi
`

type UpdateArticleReferenceParams struct {
	ID      uuid.UUID
	Title   string
	Authors string
	Journal string
	Year    string
	Joi     string
	Pmid    string
}

func (q *Queries) UpdateArticleReference(ctx context.Context, arg UpdateArticleReferenceParams) (ArticleReference, error) {
	row := q.db.QueryRowContext(ctx, updateArticleReference,
		arg.ID,
		arg.Title,
		arg.Authors,
		arg.Journal,
		arg.Year,
		arg.Joi,
		arg.Pmid,
	)
	var i ArticleReference
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Authors,
		&i.Journal,
		&i.Year,
		&i.Pmid,
		&i.Joi,
	)
	return i, err
}
