// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: protocol_treatment.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addCycleToProtocol = `-- name: AddCycleToProtocol :one
INSERT INTO protocol_cycles (protocol_id, cycle, cycle_duration)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, cycle, cycle_duration, protocol_id
`

type AddCycleToProtocolParams struct {
	ProtocolID    uuid.UUID `json:"protocol_id"`
	Cycle         string    `json:"cycle"`
	CycleDuration string    `json:"cycle_duration"`
}

func (q *Queries) AddCycleToProtocol(ctx context.Context, arg AddCycleToProtocolParams) (ProtocolCycle, error) {
	row := q.db.QueryRowContext(ctx, addCycleToProtocol, arg.ProtocolID, arg.Cycle, arg.CycleDuration)
	var i ProtocolCycle
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Cycle,
		&i.CycleDuration,
		&i.ProtocolID,
	)
	return i, err
}

const addProtocolTreatment = `-- name: AddProtocolTreatment :one
INSERT INTO protocol_treatment (medication_id, dose, route, frequency, duration, administration_guide)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, medication_id, dose, route, frequency, duration, administration_guide
`

type AddProtocolTreatmentParams struct {
	MedicationID        uuid.UUID             `json:"medication_id"`
	Dose                string                `json:"dose"`
	Route               PrescriptionRouteEnum `json:"route"`
	Frequency           string                `json:"frequency"`
	Duration            string                `json:"duration"`
	AdministrationGuide string                `json:"administration_guide"`
}

func (q *Queries) AddProtocolTreatment(ctx context.Context, arg AddProtocolTreatmentParams) (ProtocolTreatment, error) {
	row := q.db.QueryRowContext(ctx, addProtocolTreatment,
		arg.MedicationID,
		arg.Dose,
		arg.Route,
		arg.Frequency,
		arg.Duration,
		arg.AdministrationGuide,
	)
	var i ProtocolTreatment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MedicationID,
		&i.Dose,
		&i.Route,
		&i.Frequency,
		&i.Duration,
		&i.AdministrationGuide,
	)
	return i, err
}

const addTreatmentToCycle = `-- name: AddTreatmentToCycle :exec
INSERT INTO treatment_cycles_values (protocol_cycles_id, protocol_treatment_id)
VALUES ($1, $2)
`

type AddTreatmentToCycleParams struct {
	ProtocolCyclesID    uuid.UUID `json:"protocol_cycles_id"`
	ProtocolTreatmentID uuid.UUID `json:"protocol_treatment_id"`
}

func (q *Queries) AddTreatmentToCycle(ctx context.Context, arg AddTreatmentToCycleParams) error {
	_, err := q.db.ExecContext(ctx, addTreatmentToCycle, arg.ProtocolCyclesID, arg.ProtocolTreatmentID)
	return err
}

const getCycleByData = `-- name: GetCycleByData :one
SELECT id, created_at, updated_at, cycle, cycle_duration, protocol_id FROM protocol_cycles
WHERE protocol_id = $1 AND cycle = $2 AND cycle_duration = $3
`

type GetCycleByDataParams struct {
	ProtocolID    uuid.UUID `json:"protocol_id"`
	Cycle         string    `json:"cycle"`
	CycleDuration string    `json:"cycle_duration"`
}

func (q *Queries) GetCycleByData(ctx context.Context, arg GetCycleByDataParams) (ProtocolCycle, error) {
	row := q.db.QueryRowContext(ctx, getCycleByData, arg.ProtocolID, arg.Cycle, arg.CycleDuration)
	var i ProtocolCycle
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Cycle,
		&i.CycleDuration,
		&i.ProtocolID,
	)
	return i, err
}

const getProtocolCyclesWithTreatments = `-- name: GetProtocolCyclesWithTreatments :one
SELECT COALESCE(jsonb_agg(cycle_data ORDER BY cycle_order), '[]'::jsonb) AS data
FROM (
  SELECT 
    pc.id,
    pc.created_at,
    pc.updated_at,
    pc.cycle,
    pc.cycle_duration,
    COALESCE(NULLIF(regexp_replace(pc.cycle, '\D', '', 'g'), '')::int, 0) AS cycle_order,
    COALESCE((
      SELECT jsonb_agg(treatment_data ORDER BY treatment_order)
      FROM (
        SELECT 
          jsonb_build_object(
            'medication_id', m.id,
            'medication_name', m.name,
            'medication_description', m.description,
            'medication_category', m.category,
            'medication_alternates', m.alternate_names,
            'id', pt.id,
            'dose', pt.dose,
            'created_at', pt.created_at,
            'updated_at', pt.updated_at,
            'route', pt.route,
            'frequency', pt.frequency,
            'duration', pt.duration,
            'administration_guide', pt.administration_guide
          ) AS treatment_data,
          COALESCE(NULLIF(regexp_replace(pt.frequency, '\D', '', 'g'), '')::int, 0) AS treatment_order
        FROM protocol_treatment pt
        LEFT JOIN medications m ON pt.medication_id = m.id
        LEFT JOIN treatment_cycles_values tc 
          ON tc.protocol_treatment_id = pt.id AND tc.protocol_cycles_id = pc.id
        WHERE tc.protocol_cycles_id = pc.id
      ) t
    ), '[]'::jsonb) AS treatments
  FROM protocol_cycles pc
  WHERE pc.protocol_id = $1
) cycle_data
`

func (q *Queries) GetProtocolCyclesWithTreatments(ctx context.Context, protocolID uuid.UUID) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getProtocolCyclesWithTreatments, protocolID)
	var data interface{}
	err := row.Scan(&data)
	return data, err
}

const getProtocolTreatmentByData = `-- name: GetProtocolTreatmentByData :one
SELECT id, created_at, updated_at, medication_id, dose, route, frequency, duration, administration_guide FROM protocol_treatment
WHERE medication_id = $1 AND dose = $2 AND route = $3 AND frequency = $4 AND duration = $5
`

type GetProtocolTreatmentByDataParams struct {
	MedicationID uuid.UUID             `json:"medication_id"`
	Dose         string                `json:"dose"`
	Route        PrescriptionRouteEnum `json:"route"`
	Frequency    string                `json:"frequency"`
	Duration     string                `json:"duration"`
}

func (q *Queries) GetProtocolTreatmentByData(ctx context.Context, arg GetProtocolTreatmentByDataParams) (ProtocolTreatment, error) {
	row := q.db.QueryRowContext(ctx, getProtocolTreatmentByData,
		arg.MedicationID,
		arg.Dose,
		arg.Route,
		arg.Frequency,
		arg.Duration,
	)
	var i ProtocolTreatment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MedicationID,
		&i.Dose,
		&i.Route,
		&i.Frequency,
		&i.Duration,
		&i.AdministrationGuide,
	)
	return i, err
}

const getProtocolTreatmentByID = `-- name: GetProtocolTreatmentByID :one
SELECT m.id as medication_id, m.name as medication_name, m.description as medication_description, m.category as medication_category ,m.alternate_names as medication_alternates, pt.id as id, pt.dose, pt.created_at,pt.updated_at, pt.route, pt.frequency, pt.duration, pt.administration_guide
FROM medications m
JOIN protocol_treatment pt ON m.id = pt.medication_id
WHERE pt.id = $1
`

type GetProtocolTreatmentByIDRow struct {
	MedicationID          uuid.UUID             `json:"medication_id"`
	MedicationName        string                `json:"medication_name"`
	MedicationDescription string                `json:"medication_description"`
	MedicationCategory    string                `json:"medication_category"`
	MedicationAlternates  []string              `json:"medication_alternates"`
	ID                    uuid.UUID             `json:"id"`
	Dose                  string                `json:"dose"`
	CreatedAt             time.Time             `json:"created_at"`
	UpdatedAt             time.Time             `json:"updated_at"`
	Route                 PrescriptionRouteEnum `json:"route"`
	Frequency             string                `json:"frequency"`
	Duration              string                `json:"duration"`
	AdministrationGuide   string                `json:"administration_guide"`
}

func (q *Queries) GetProtocolTreatmentByID(ctx context.Context, id uuid.UUID) (GetProtocolTreatmentByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getProtocolTreatmentByID, id)
	var i GetProtocolTreatmentByIDRow
	err := row.Scan(
		&i.MedicationID,
		&i.MedicationName,
		&i.MedicationDescription,
		&i.MedicationCategory,
		pq.Array(&i.MedicationAlternates),
		&i.ID,
		&i.Dose,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Route,
		&i.Frequency,
		&i.Duration,
		&i.AdministrationGuide,
	)
	return i, err
}

const getTreatments = `-- name: GetTreatments :many
SELECT m.id as medication_id, m.name as medication_name, m.description as medication_description, m.category as medication_category ,m.alternate_names as medication_alternates, pt.id as id, pt.dose, pt.created_at,pt.updated_at, pt.route, pt.frequency, pt.duration, pt.administration_guide
FROM medications m
JOIN protocol_treatment pt ON m.id = pt.medication_id
ORDER BY medication_name ASC
`

type GetTreatmentsRow struct {
	MedicationID          uuid.UUID             `json:"medication_id"`
	MedicationName        string                `json:"medication_name"`
	MedicationDescription string                `json:"medication_description"`
	MedicationCategory    string                `json:"medication_category"`
	MedicationAlternates  []string              `json:"medication_alternates"`
	ID                    uuid.UUID             `json:"id"`
	Dose                  string                `json:"dose"`
	CreatedAt             time.Time             `json:"created_at"`
	UpdatedAt             time.Time             `json:"updated_at"`
	Route                 PrescriptionRouteEnum `json:"route"`
	Frequency             string                `json:"frequency"`
	Duration              string                `json:"duration"`
	AdministrationGuide   string                `json:"administration_guide"`
}

func (q *Queries) GetTreatments(ctx context.Context) ([]GetTreatmentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTreatments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTreatmentsRow{}
	for rows.Next() {
		var i GetTreatmentsRow
		if err := rows.Scan(
			&i.MedicationID,
			&i.MedicationName,
			&i.MedicationDescription,
			&i.MedicationCategory,
			pq.Array(&i.MedicationAlternates),
			&i.ID,
			&i.Dose,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Route,
			&i.Frequency,
			&i.Duration,
			&i.AdministrationGuide,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTreatmentsByCycle = `-- name: GetTreatmentsByCycle :many
SELECT m.id as medication_id, m.name as medication_name, m.description as medication_description, m.category as medication_category ,m.alternate_names as medication_alternates, pt.id as id, pt.dose, pt.created_at,pt.updated_at, pt.route, pt.frequency, pt.duration, pt.administration_guide
FROM medications m
JOIN protocol_treatment pt ON m.id = pt.medication_id
JOIN treatment_cycles_values ON pt.id = treatment_cycles_values.protocol_treatment_id
WHERE treatment_cycles_values.protocol_cycles_id = $1
ORDER BY medication_name ASC
`

type GetTreatmentsByCycleRow struct {
	MedicationID          uuid.UUID             `json:"medication_id"`
	MedicationName        string                `json:"medication_name"`
	MedicationDescription string                `json:"medication_description"`
	MedicationCategory    string                `json:"medication_category"`
	MedicationAlternates  []string              `json:"medication_alternates"`
	ID                    uuid.UUID             `json:"id"`
	Dose                  string                `json:"dose"`
	CreatedAt             time.Time             `json:"created_at"`
	UpdatedAt             time.Time             `json:"updated_at"`
	Route                 PrescriptionRouteEnum `json:"route"`
	Frequency             string                `json:"frequency"`
	Duration              string                `json:"duration"`
	AdministrationGuide   string                `json:"administration_guide"`
}

func (q *Queries) GetTreatmentsByCycle(ctx context.Context, protocolCyclesID uuid.UUID) ([]GetTreatmentsByCycleRow, error) {
	rows, err := q.db.QueryContext(ctx, getTreatmentsByCycle, protocolCyclesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTreatmentsByCycleRow{}
	for rows.Next() {
		var i GetTreatmentsByCycleRow
		if err := rows.Scan(
			&i.MedicationID,
			&i.MedicationName,
			&i.MedicationDescription,
			&i.MedicationCategory,
			pq.Array(&i.MedicationAlternates),
			&i.ID,
			&i.Dose,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Route,
			&i.Frequency,
			&i.Duration,
			&i.AdministrationGuide,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCycleByID = `-- name: RemoveCycleByID :exec
DELETE FROM protocol_cycles
WHERE id = $1
`

func (q *Queries) RemoveCycleByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeCycleByID, id)
	return err
}

const removeProtocolTreatment = `-- name: RemoveProtocolTreatment :exec
DELETE FROM protocol_treatment
WHERE id = $1
`

func (q *Queries) RemoveProtocolTreatment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeProtocolTreatment, id)
	return err
}

const removeTreatmentFromCycle = `-- name: RemoveTreatmentFromCycle :exec
DELETE FROM treatment_cycles_values
WHERE protocol_cycles_id = $1 AND protocol_treatment_id = $2
`

type RemoveTreatmentFromCycleParams struct {
	ProtocolCyclesID    uuid.UUID `json:"protocol_cycles_id"`
	ProtocolTreatmentID uuid.UUID `json:"protocol_treatment_id"`
}

func (q *Queries) RemoveTreatmentFromCycle(ctx context.Context, arg RemoveTreatmentFromCycleParams) error {
	_, err := q.db.ExecContext(ctx, removeTreatmentFromCycle, arg.ProtocolCyclesID, arg.ProtocolTreatmentID)
	return err
}

const updateProtocolTreatment = `-- name: UpdateProtocolTreatment :one
UPDATE protocol_treatment
SET
    updated_at = NOW(),
    medication_id = $2,
    dose = $3,
    route = $4,
    frequency = $5,
    duration = $6,
    administration_guide = $7
WHERE id = $1
RETURNING id, created_at, updated_at, medication_id, dose, route, frequency, duration, administration_guide
`

type UpdateProtocolTreatmentParams struct {
	ID                  uuid.UUID             `json:"id"`
	MedicationID        uuid.UUID             `json:"medication_id"`
	Dose                string                `json:"dose"`
	Route               PrescriptionRouteEnum `json:"route"`
	Frequency           string                `json:"frequency"`
	Duration            string                `json:"duration"`
	AdministrationGuide string                `json:"administration_guide"`
}

func (q *Queries) UpdateProtocolTreatment(ctx context.Context, arg UpdateProtocolTreatmentParams) (ProtocolTreatment, error) {
	row := q.db.QueryRowContext(ctx, updateProtocolTreatment,
		arg.ID,
		arg.MedicationID,
		arg.Dose,
		arg.Route,
		arg.Frequency,
		arg.Duration,
		arg.AdministrationGuide,
	)
	var i ProtocolTreatment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MedicationID,
		&i.Dose,
		&i.Route,
		&i.Frequency,
		&i.Duration,
		&i.AdministrationGuide,
	)
	return i, err
}

const upsertCycleToProtocol = `-- name: UpsertCycleToProtocol :one
WITH input_values(id, protocol_id, cycle, cycle_duration) AS (
  VALUES (
    CASE 
      WHEN $1::uuid  = '00000000-0000-0000-0000-000000000000'
      THEN gen_random_uuid() 
      ELSE $1::uuid 
    END,
    $2::uuid,
    $3::TEXT,
    $4::text    
  )
)
INSERT INTO protocol_cycles (id, protocol_id, cycle, cycle_duration)
SELECT id, protocol_id, cycle, cycle_duration FROM input_values
ON CONFLICT (id) DO UPDATE
SET protocol_id = EXCLUDED.protocol_id,
    cycle = EXCLUDED.cycle,
    cycle_duration = EXCLUDED.cycle_duration,      
    updated_at = NOW()
RETURNING id, created_at, updated_at, cycle, cycle_duration, protocol_id
`

type UpsertCycleToProtocolParams struct {
	ID            uuid.UUID `json:"id"`
	ProtocolID    uuid.UUID `json:"protocol_id"`
	Cycle         string    `json:"cycle"`
	CycleDuration string    `json:"cycle_duration"`
}

func (q *Queries) UpsertCycleToProtocol(ctx context.Context, arg UpsertCycleToProtocolParams) (ProtocolCycle, error) {
	row := q.db.QueryRowContext(ctx, upsertCycleToProtocol,
		arg.ID,
		arg.ProtocolID,
		arg.Cycle,
		arg.CycleDuration,
	)
	var i ProtocolCycle
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Cycle,
		&i.CycleDuration,
		&i.ProtocolID,
	)
	return i, err
}

const upsertProtocolTreatment = `-- name: UpsertProtocolTreatment :one
WITH input_values(id, medication_id, dose, route, frequency, duration, administration_guide) AS (
  VALUES (
    CASE 
      WHEN $1 = '00000000-0000-0000-0000-000000000000'::uuid 
      THEN gen_random_uuid() 
      ELSE $1::uuid 
    END,
    $2::uuid,
    $3,
    $4::prescription_route_enum,
    $5,
    $6,
    $7
  )
)
INSERT INTO protocol_treatment (id, medication_id, dose, route, frequency, duration, administration_guide)
SELECT id, medication_id, dose, route, frequency, duration, administration_guide FROM input_values
ON CONFLICT (id) DO UPDATE
SET medication_id = EXCLUDED.medication_id,
    dose = EXCLUDED.dose,
    route = EXCLUDED.route,
    frequency = EXCLUDED.frequency,
    duration = EXCLUDED.duration,
    administration_guide = EXCLUDED.administration_guide,    
    updated_at = NOW()
RETURNING id, created_at, updated_at, medication_id, dose, route, frequency, duration, administration_guide
`

type UpsertProtocolTreatmentParams struct {
	ID                  interface{}           `json:"id"`
	MedicationID        uuid.UUID             `json:"medication_id"`
	Dose                interface{}           `json:"dose"`
	Route               PrescriptionRouteEnum `json:"route"`
	Frequency           interface{}           `json:"frequency"`
	Duration            interface{}           `json:"duration"`
	AdministrationGuide interface{}           `json:"administration_guide"`
}

func (q *Queries) UpsertProtocolTreatment(ctx context.Context, arg UpsertProtocolTreatmentParams) (ProtocolTreatment, error) {
	row := q.db.QueryRowContext(ctx, upsertProtocolTreatment,
		arg.ID,
		arg.MedicationID,
		arg.Dose,
		arg.Route,
		arg.Frequency,
		arg.Duration,
		arg.AdministrationGuide,
	)
	var i ProtocolTreatment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MedicationID,
		&i.Dose,
		&i.Route,
		&i.Frequency,
		&i.Duration,
		&i.AdministrationGuide,
	)
	return i, err
}
