// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: protocol_treatment.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addCycleToProtocol = `-- name: AddCycleToProtocol :one
INSERT INTO protocol_cycles (protocol_id, cycle, cycle_duration)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, cycle, cycle_duration, protocol_id
`

type AddCycleToProtocolParams struct {
	ProtocolID    uuid.UUID
	Cycle         string
	CycleDuration string
}

func (q *Queries) AddCycleToProtocol(ctx context.Context, arg AddCycleToProtocolParams) (ProtocolCycle, error) {
	row := q.db.QueryRowContext(ctx, addCycleToProtocol, arg.ProtocolID, arg.Cycle, arg.CycleDuration)
	var i ProtocolCycle
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Cycle,
		&i.CycleDuration,
		&i.ProtocolID,
	)
	return i, err
}

const addProtocolTreatment = `-- name: AddProtocolTreatment :one
INSERT INTO protocol_treatment (medication, dose, route, frequency, duration, administration_guide)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, medication, dose, route, frequency, duration, administration_guide
`

type AddProtocolTreatmentParams struct {
	Medication          uuid.UUID
	Dose                string
	Route               string
	Frequency           string
	Duration            string
	AdministrationGuide string
}

func (q *Queries) AddProtocolTreatment(ctx context.Context, arg AddProtocolTreatmentParams) (ProtocolTreatment, error) {
	row := q.db.QueryRowContext(ctx, addProtocolTreatment,
		arg.Medication,
		arg.Dose,
		arg.Route,
		arg.Frequency,
		arg.Duration,
		arg.AdministrationGuide,
	)
	var i ProtocolTreatment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Medication,
		&i.Dose,
		&i.Route,
		&i.Frequency,
		&i.Duration,
		&i.AdministrationGuide,
	)
	return i, err
}

const addToxicityModification = `-- name: AddToxicityModification :one
INSERT INTO toxicity_modifications (title, grade, adjustement, protocol_id)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, title, grade, adjustement, protocol_id
`

type AddToxicityModificationParams struct {
	Title       string
	Grade       string
	Adjustement string
	ProtocolID  uuid.UUID
}

func (q *Queries) AddToxicityModification(ctx context.Context, arg AddToxicityModificationParams) (ToxicityModification, error) {
	row := q.db.QueryRowContext(ctx, addToxicityModification,
		arg.Title,
		arg.Grade,
		arg.Adjustement,
		arg.ProtocolID,
	)
	var i ToxicityModification
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Grade,
		&i.Adjustement,
		&i.ProtocolID,
	)
	return i, err
}

const addTreatmentModification = `-- name: AddTreatmentModification :one
INSERT INTO treatment_modifications (category, description, adjustement, treatment_id)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, category, description, adjustement, treatment_id
`

type AddTreatmentModificationParams struct {
	Category    string
	Description string
	Adjustement string
	TreatmentID uuid.UUID
}

func (q *Queries) AddTreatmentModification(ctx context.Context, arg AddTreatmentModificationParams) (TreatmentModification, error) {
	row := q.db.QueryRowContext(ctx, addTreatmentModification,
		arg.Category,
		arg.Description,
		arg.Adjustement,
		arg.TreatmentID,
	)
	var i TreatmentModification
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Category,
		&i.Description,
		&i.Adjustement,
		&i.TreatmentID,
	)
	return i, err
}

const addTreatmentToCycle = `-- name: AddTreatmentToCycle :exec
INSERT INTO treatment_cycles_junction (protocol_cycles_id, protocol_treatment_id)
VALUES ($1, $2)
`

type AddTreatmentToCycleParams struct {
	ProtocolCyclesID    uuid.UUID
	ProtocolTreatmentID uuid.UUID
}

func (q *Queries) AddTreatmentToCycle(ctx context.Context, arg AddTreatmentToCycleParams) error {
	_, err := q.db.ExecContext(ctx, addTreatmentToCycle, arg.ProtocolCyclesID, arg.ProtocolTreatmentID)
	return err
}

const getProtocolTreatmentByID = `-- name: GetProtocolTreatmentByID :one
SELECT id, created_at, updated_at, medication, dose, route, frequency, duration, administration_guide FROM protocol_treatment
WHERE id = $1
`

func (q *Queries) GetProtocolTreatmentByID(ctx context.Context, id uuid.UUID) (ProtocolTreatment, error) {
	row := q.db.QueryRowContext(ctx, getProtocolTreatmentByID, id)
	var i ProtocolTreatment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Medication,
		&i.Dose,
		&i.Route,
		&i.Frequency,
		&i.Duration,
		&i.AdministrationGuide,
	)
	return i, err
}

const removeProtocolTreatment = `-- name: RemoveProtocolTreatment :exec
DELETE FROM protocol_treatment
WHERE id = $1
`

func (q *Queries) RemoveProtocolTreatment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeProtocolTreatment, id)
	return err
}

const removeToxicityModification = `-- name: RemoveToxicityModification :exec
DELETE FROM toxicity_modifications
WHERE id = $1
`

func (q *Queries) RemoveToxicityModification(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeToxicityModification, id)
	return err
}

const removeTreatmentFromCycle = `-- name: RemoveTreatmentFromCycle :exec
DELETE FROM treatment_cycles_junction
WHERE protocol_cycles_id = $1 AND protocol_treatment_id = $2
`

type RemoveTreatmentFromCycleParams struct {
	ProtocolCyclesID    uuid.UUID
	ProtocolTreatmentID uuid.UUID
}

func (q *Queries) RemoveTreatmentFromCycle(ctx context.Context, arg RemoveTreatmentFromCycleParams) error {
	_, err := q.db.ExecContext(ctx, removeTreatmentFromCycle, arg.ProtocolCyclesID, arg.ProtocolTreatmentID)
	return err
}

const removeTreatmentModification = `-- name: RemoveTreatmentModification :exec
DELETE FROM treatment_modifications
WHERE id = $1
`

func (q *Queries) RemoveTreatmentModification(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeTreatmentModification, id)
	return err
}

const updateProtocolTreatment = `-- name: UpdateProtocolTreatment :one
UPDATE protocol_treatment
SET
    updated_at = NOW(),
    medication = $2,
    dose = $3,
    route = $4,
    frequency = $5,
    duration = $6,
    administration_guide = $7
WHERE id = $1
RETURNING id, created_at, updated_at, medication, dose, route, frequency, duration, administration_guide
`

type UpdateProtocolTreatmentParams struct {
	ID                  uuid.UUID
	Medication          uuid.UUID
	Dose                string
	Route               string
	Frequency           string
	Duration            string
	AdministrationGuide string
}

func (q *Queries) UpdateProtocolTreatment(ctx context.Context, arg UpdateProtocolTreatmentParams) (ProtocolTreatment, error) {
	row := q.db.QueryRowContext(ctx, updateProtocolTreatment,
		arg.ID,
		arg.Medication,
		arg.Dose,
		arg.Route,
		arg.Frequency,
		arg.Duration,
		arg.AdministrationGuide,
	)
	var i ProtocolTreatment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Medication,
		&i.Dose,
		&i.Route,
		&i.Frequency,
		&i.Duration,
		&i.AdministrationGuide,
	)
	return i, err
}

const updateToxicityModification = `-- name: UpdateToxicityModification :one
UPDATE toxicity_modifications
SET
    updated_at = NOW(),
    title = $2,
    grade = $3,
    adjustement = $4,
    protocol_id = $5
WHERE id = $1
RETURNING id, created_at, updated_at, title, grade, adjustement, protocol_id
`

type UpdateToxicityModificationParams struct {
	ID          uuid.UUID
	Title       string
	Grade       string
	Adjustement string
	ProtocolID  uuid.UUID
}

func (q *Queries) UpdateToxicityModification(ctx context.Context, arg UpdateToxicityModificationParams) (ToxicityModification, error) {
	row := q.db.QueryRowContext(ctx, updateToxicityModification,
		arg.ID,
		arg.Title,
		arg.Grade,
		arg.Adjustement,
		arg.ProtocolID,
	)
	var i ToxicityModification
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Grade,
		&i.Adjustement,
		&i.ProtocolID,
	)
	return i, err
}

const updateTreatmentModification = `-- name: UpdateTreatmentModification :one
UPDATE treatment_modifications
SET
    updated_at = NOW(),
    category = $2,
    description = $3,
    adjustement = $4,
    treatment_id = $5
WHERE id = $1
RETURNING id, created_at, updated_at, category, description, adjustement, treatment_id
`

type UpdateTreatmentModificationParams struct {
	ID          uuid.UUID
	Category    string
	Description string
	Adjustement string
	TreatmentID uuid.UUID
}

func (q *Queries) UpdateTreatmentModification(ctx context.Context, arg UpdateTreatmentModificationParams) (TreatmentModification, error) {
	row := q.db.QueryRowContext(ctx, updateTreatmentModification,
		arg.ID,
		arg.Category,
		arg.Description,
		arg.Adjustement,
		arg.TreatmentID,
	)
	var i TreatmentModification
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Category,
		&i.Description,
		&i.Adjustement,
		&i.TreatmentID,
	)
	return i, err
}
