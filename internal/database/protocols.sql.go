// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: protocols.sql

package database

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createProtocol = `-- name: CreateProtocol :one
INSERT INTO protocols (tumor_group, code, name, tags, notes)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on
`

type CreateProtocolParams struct {
	TumorGroup string   `json:"tumor_group"`
	Code       string   `json:"code"`
	Name       string   `json:"name"`
	Tags       []string `json:"tags"`
	Notes      string   `json:"notes"`
}

func (q *Queries) CreateProtocol(ctx context.Context, arg CreateProtocolParams) (Protocol, error) {
	row := q.db.QueryRowContext(ctx, createProtocol,
		arg.TumorGroup,
		arg.Code,
		arg.Name,
		pq.Array(arg.Tags),
		arg.Notes,
	)
	var i Protocol
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TumorGroup,
		&i.Code,
		&i.Name,
		pq.Array(&i.Tags),
		&i.Notes,
		&i.ProtocolUrl,
		&i.PatientHandoutUrl,
		&i.RevisedOn,
		&i.ActivatedOn,
	)
	return i, err
}

const createProtocolbyScraping = `-- name: CreateProtocolbyScraping :one
INSERT INTO protocols (tumor_group, code, name, tags, notes, revised_on, activated_on)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on
`

type CreateProtocolbyScrapingParams struct {
	TumorGroup  string   `json:"tumor_group"`
	Code        string   `json:"code"`
	Name        string   `json:"name"`
	Tags        []string `json:"tags"`
	Notes       string   `json:"notes"`
	RevisedOn   string   `json:"revised_on"`
	ActivatedOn string   `json:"activated_on"`
}

func (q *Queries) CreateProtocolbyScraping(ctx context.Context, arg CreateProtocolbyScrapingParams) (Protocol, error) {
	row := q.db.QueryRowContext(ctx, createProtocolbyScraping,
		arg.TumorGroup,
		arg.Code,
		arg.Name,
		pq.Array(arg.Tags),
		arg.Notes,
		arg.RevisedOn,
		arg.ActivatedOn,
	)
	var i Protocol
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TumorGroup,
		&i.Code,
		&i.Name,
		pq.Array(&i.Tags),
		&i.Notes,
		&i.ProtocolUrl,
		&i.PatientHandoutUrl,
		&i.RevisedOn,
		&i.ActivatedOn,
	)
	return i, err
}

const deleteProtocol = `-- name: DeleteProtocol :exec
DELETE FROM protocols
WHERE id = $1
`

func (q *Queries) DeleteProtocol(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProtocol, id)
	return err
}

const getProtocolByCode = `-- name: GetProtocolByCode :one
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on FROM protocols
WHERE code = $1
`

func (q *Queries) GetProtocolByCode(ctx context.Context, code string) (Protocol, error) {
	row := q.db.QueryRowContext(ctx, getProtocolByCode, code)
	var i Protocol
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TumorGroup,
		&i.Code,
		&i.Name,
		pq.Array(&i.Tags),
		&i.Notes,
		&i.ProtocolUrl,
		&i.PatientHandoutUrl,
		&i.RevisedOn,
		&i.ActivatedOn,
	)
	return i, err
}

const getProtocolByID = `-- name: GetProtocolByID :one
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on FROM protocols
WHERE id = $1
`

func (q *Queries) GetProtocolByID(ctx context.Context, id uuid.UUID) (Protocol, error) {
	row := q.db.QueryRowContext(ctx, getProtocolByID, id)
	var i Protocol
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TumorGroup,
		&i.Code,
		&i.Name,
		pq.Array(&i.Tags),
		&i.Notes,
		&i.ProtocolUrl,
		&i.PatientHandoutUrl,
		&i.RevisedOn,
		&i.ActivatedOn,
	)
	return i, err
}

const getProtocolData = `-- name: GetProtocolData :one
WITH tox_grades AS (
    SELECT
        tox.id AS toxicity_id,
        COALESCE(
            json_agg(DISTINCT json_build_object(
            'modification_id', ptm.id,
            'toxicity_grade_id', tg.id,
            'grade', tg.grade,
            'description', tg.description,
            'created_at', ptm.created_at,
            'updated_at', ptm.updated_at,
            'adjustment', ptm.adjustment
        ) ORDER BY tg.grade) FILTER (WHERE ptm.id IS NOT NULL), '[]') AS grades
    FROM
        toxicities tox
        JOIN toxicity_grades tg ON tg.toxicity_id = tox.id
        JOIN protocol_tox_modifications ptm ON ptm.toxicity_grade_id = tg.id
    GROUP BY tox.id
),
categorized_tests AS (
  SELECT
    pt.protocol_id,
    json_object_agg(
      t.test_category, 
      json_object_agg(
        t.urgency,
        COALESCE(
        json_agg(DISTINCT json_build_object(
          'test_id', t.id,
          'test_name', t.name,
          'description', t.description,
          'form_url', t.form_url,
          'unit', t.unit,
          'lower_limit', t.lower_limit,
          'upper_limit', t.upper_limit
        )) FILTER (WHERE t.id IS NOT NULL), '[]'
        )
      )
    ) AS categorized_tests
  FROM protocol_tests pt
  JOIN tests t ON pt.test_id = t.id
  GROUP BY pt.protocol_id
),
categorized_meds AS (
  SELECT
    pm.protocol_id,
    json_object_agg(
      pm.category,
      COALESCE(json_agg(DISTINCT json_build_object(
        'medication_id', m.id,
        'medication_name', m.name,
        'dose', mp.dose,
        'route', mp.route,
        'frequency', mp.frequency,
        'duration', mp.duration,
        'instructions', mp.instructions
      ))FILTER (WHERE m.id IS NOT NULL), '[]'
    )) AS categorized_meds
  FROM protocol_meds pm
  JOIN medication_prescription mp ON pm.prescription_id = mp.id
  JOIN medications m ON mp.medication = m.id
  GROUP BY pm.protocol_id
)
SELECT
    p.id,
    p.tumor_group,
    p.code,
    p.name,
    p.tags,
    p.created_at,
    p.updated_at,
    p.revised_on,
    p.activated_on,
    -- Aggregate associated physicians
    COALESCE(json_agg(DISTINCT json_build_object(
        'physician_id', ph.id,
        'first_name', ph.first_name,
        'last_name', ph.last_name,
        'email', ph.email,
        'site', ph.site
    )) FILTER (WHERE ph.id IS NOT NULL), '[]'::json) AS associated_physicians,
    -- Aggregate associated medications
    COALESCE(ct.categorized_tests, '[]') AS categorized_tests,
    COALESCE(cm.categorized_meds, '[]') AS categorized_medications,
    -- Aggregate eligibility criteria
    COALESCE(json_agg(DISTINCT json_build_object(
        'criteria_id', pec.id,
        'type', pec.type,
        'description', pec.description
    )) FILTER (WHERE pec.id IS NOT NULL), '[]'::json) AS eligibility_criteria,
    -- Aggregate cautions
    COALESCE(json_agg(DISTINCT json_build_object(
        'caution_id', pc.id,
        'description', pc.description
    )) FILTER (WHERE pc.id IS NOT NULL), '[]'::json) AS protocol_cautions,
    -- Aggregate precautions
    COALESCE(json_agg(DISTINCT json_build_object(
        'precaution_id', pp.id,
        'title', pp.title,
        'description', pp.description
    )) FILTER (WHERE pp.id IS NOT NULL), '[]'::json) AS protocol_precautions,
    -- Aggregate cycles
    COALESCE(json_agg(DISTINCT json_build_object(
        'cycle_id', pc.id,
        'cycle', pc.cycle,
        'cycle_duration', pc.cycle_duration
    )) FILTER (WHERE pc.id IS NOT NULL), '[]'::json) AS protocol_cycles,
    -- Aggregate references
    COALESCE(json_agg(DISTINCT json_build_object(
        'reference_id', ar.id,
        'title', ar.title,
        'authors', ar.authors,
        'journal', ar.journal,
        'year', ar.year,
        'pmid', ar.pmid,
        'doi', ar.doi
    )) FILTER (WHERE ar.id IS NOT NULL), '[]'::json) AS article_references,
    -- Aggregate toxicity modifications
    COALESCE(
        json_agg(
            DISTINCT json_build_object(
            'id', tox.id,
            'created_at',tox.created_at,
            'updated_at',tox.updated_at,
            'title',tox.title,
            'category',tox.category,
            'description',tox.description,
            'grades_with_adjustment', tgrades.grades                 
    )) FILTER (WHERE tox.id IS NOT NULL), '[]'::json) AS toxicities_with_adjustments
FROM
    protocols p
    -- Join with physicians associated with the protocol
    LEFT JOIN protocol_contact_physicians pcp ON p.id = pcp.protocol_id
    LEFT JOIN physicians ph ON pcp.physician_id = ph.id      
    -- Join with eligibility criteria
    LEFT JOIN protocol_eligibility_criteria_values pecv ON p.id = pecv.protocol_id
    LEFT JOIN protocol_eligibility_criteria pec ON pecv.criteria_id = pec.id
    -- Join with cautions
    LEFT JOIN protocol_cautions_values pcv ON p.id = pcv.protocol_id
    LEFT JOIN protocol_cautions pc ON pcv.caution_id = pc.id
    -- Join with precautions
    LEFT JOIN protocol_precautions_values ppv ON p.id = ppv.protocol_id
    LEFT JOIN protocol_precautions pp ON ppv.precaution_id = pp.id
    -- Join with cycles
    LEFT JOIN protocol_cycles pc ON p.id = pc.protocol_id
    -- Join with references
    LEFT JOIN protocol_references_value prv ON p.id = prv.protocol_id
    LEFT JOIN article_references ar ON prv.reference_id = ar.id
    -- Join with toxicity modifications
    LEFT JOIN protocol_tox_modifications ptm ON p.id = ptm.protocol_id
    LEFT JOIN toxicity_grades tg ON ptm.toxicity_grade_id = tg.id
    LEFT JOIN toxicities tox ON tg.toxicity_id = tox.id
    LEFT JOIN tox_grades tgrades ON tox.id = tgrades.toxicity_id
    --meds and tests
    LEFT JOIN categorized_tests ct ON p.id = ct.protocol_id
    LEFT JOIN categorized_meds cm ON p.id = cm.protocol_id
WHERE
    p.id = $1    
GROUP BY
    p.id
`

type GetProtocolDataRow struct {
	ID                        uuid.UUID       `json:"id"`
	TumorGroup                string          `json:"tumor_group"`
	Code                      string          `json:"code"`
	Name                      string          `json:"name"`
	Tags                      []string        `json:"tags"`
	CreatedAt                 time.Time       `json:"created_at"`
	UpdatedAt                 time.Time       `json:"updated_at"`
	RevisedOn                 string          `json:"revised_on"`
	ActivatedOn               string          `json:"activated_on"`
	AssociatedPhysicians      interface{}     `json:"associated_physicians"`
	CategorizedTests          json.RawMessage `json:"categorized_tests"`
	CategorizedMedications    json.RawMessage `json:"categorized_medications"`
	EligibilityCriteria       interface{}     `json:"eligibility_criteria"`
	ProtocolCautions          interface{}     `json:"protocol_cautions"`
	ProtocolPrecautions       interface{}     `json:"protocol_precautions"`
	ProtocolCycles            interface{}     `json:"protocol_cycles"`
	ArticleReferences         interface{}     `json:"article_references"`
	ToxicitiesWithAdjustments interface{}     `json:"toxicities_with_adjustments"`
}

func (q *Queries) GetProtocolData(ctx context.Context, id uuid.UUID) (GetProtocolDataRow, error) {
	row := q.db.QueryRowContext(ctx, getProtocolData, id)
	var i GetProtocolDataRow
	err := row.Scan(
		&i.ID,
		&i.TumorGroup,
		&i.Code,
		&i.Name,
		pq.Array(&i.Tags),
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RevisedOn,
		&i.ActivatedOn,
		&i.AssociatedPhysicians,
		&i.CategorizedTests,
		&i.CategorizedMedications,
		&i.EligibilityCriteria,
		&i.ProtocolCautions,
		&i.ProtocolPrecautions,
		&i.ProtocolCycles,
		&i.ArticleReferences,
		&i.ToxicitiesWithAdjustments,
	)
	return i, err
}

const getProtocolsAsc = `-- name: GetProtocolsAsc :many
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on FROM protocols
ORDER BY name ASC
LIMIT $1 OFFSET $2
`

type GetProtocolsAscParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetProtocolsAsc(ctx context.Context, arg GetProtocolsAscParams) ([]Protocol, error) {
	rows, err := q.db.QueryContext(ctx, getProtocolsAsc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Protocol{}
	for rows.Next() {
		var i Protocol
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TumorGroup,
			&i.Code,
			&i.Name,
			pq.Array(&i.Tags),
			&i.Notes,
			&i.ProtocolUrl,
			&i.PatientHandoutUrl,
			&i.RevisedOn,
			&i.ActivatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProtocolsDesc = `-- name: GetProtocolsDesc :many
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on FROM protocols
ORDER BY name DESC
LIMIT $1 OFFSET $2
`

type GetProtocolsDescParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetProtocolsDesc(ctx context.Context, arg GetProtocolsDescParams) ([]Protocol, error) {
	rows, err := q.db.QueryContext(ctx, getProtocolsDesc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Protocol{}
	for rows.Next() {
		var i Protocol
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TumorGroup,
			&i.Code,
			&i.Name,
			pq.Array(&i.Tags),
			&i.Notes,
			&i.ProtocolUrl,
			&i.PatientHandoutUrl,
			&i.RevisedOn,
			&i.ActivatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProtocolsOnlyTumorGroupAndTagsAsc = `-- name: GetProtocolsOnlyTumorGroupAndTagsAsc :many
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on FROM protocols
WHERE tumor_group = $1
AND tags @> $2
ORDER BY name ASC
LIMIT $3 OFFSET $4
`

type GetProtocolsOnlyTumorGroupAndTagsAscParams struct {
	TumorGroup string   `json:"tumor_group"`
	Tags       []string `json:"tags"`
	Limit      int32    `json:"limit"`
	Offset     int32    `json:"offset"`
}

func (q *Queries) GetProtocolsOnlyTumorGroupAndTagsAsc(ctx context.Context, arg GetProtocolsOnlyTumorGroupAndTagsAscParams) ([]Protocol, error) {
	rows, err := q.db.QueryContext(ctx, getProtocolsOnlyTumorGroupAndTagsAsc,
		arg.TumorGroup,
		pq.Array(arg.Tags),
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Protocol{}
	for rows.Next() {
		var i Protocol
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TumorGroup,
			&i.Code,
			&i.Name,
			pq.Array(&i.Tags),
			&i.Notes,
			&i.ProtocolUrl,
			&i.PatientHandoutUrl,
			&i.RevisedOn,
			&i.ActivatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProtocolsOnlyTumorGroupAndTagsDesc = `-- name: GetProtocolsOnlyTumorGroupAndTagsDesc :many
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on FROM protocols
WHERE tumor_group = $1
AND tags @> $2
ORDER BY name DESC
LIMIT $3 OFFSET $4
`

type GetProtocolsOnlyTumorGroupAndTagsDescParams struct {
	TumorGroup string   `json:"tumor_group"`
	Tags       []string `json:"tags"`
	Limit      int32    `json:"limit"`
	Offset     int32    `json:"offset"`
}

func (q *Queries) GetProtocolsOnlyTumorGroupAndTagsDesc(ctx context.Context, arg GetProtocolsOnlyTumorGroupAndTagsDescParams) ([]Protocol, error) {
	rows, err := q.db.QueryContext(ctx, getProtocolsOnlyTumorGroupAndTagsDesc,
		arg.TumorGroup,
		pq.Array(arg.Tags),
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Protocol{}
	for rows.Next() {
		var i Protocol
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TumorGroup,
			&i.Code,
			&i.Name,
			pq.Array(&i.Tags),
			&i.Notes,
			&i.ProtocolUrl,
			&i.PatientHandoutUrl,
			&i.RevisedOn,
			&i.ActivatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProtocolsOnlyTumorGroupAsc = `-- name: GetProtocolsOnlyTumorGroupAsc :many
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on FROM protocols
WHERE tumor_group = $1
ORDER BY name ASC
LIMIT $2 OFFSET $3
`

type GetProtocolsOnlyTumorGroupAscParams struct {
	TumorGroup string `json:"tumor_group"`
	Limit      int32  `json:"limit"`
	Offset     int32  `json:"offset"`
}

func (q *Queries) GetProtocolsOnlyTumorGroupAsc(ctx context.Context, arg GetProtocolsOnlyTumorGroupAscParams) ([]Protocol, error) {
	rows, err := q.db.QueryContext(ctx, getProtocolsOnlyTumorGroupAsc, arg.TumorGroup, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Protocol{}
	for rows.Next() {
		var i Protocol
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TumorGroup,
			&i.Code,
			&i.Name,
			pq.Array(&i.Tags),
			&i.Notes,
			&i.ProtocolUrl,
			&i.PatientHandoutUrl,
			&i.RevisedOn,
			&i.ActivatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProtocolsOnlyTumorGroupDesc = `-- name: GetProtocolsOnlyTumorGroupDesc :many
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on FROM protocols
WHERE tumor_group = $1
ORDER BY name DESC
LIMIT $2 OFFSET $3
`

type GetProtocolsOnlyTumorGroupDescParams struct {
	TumorGroup string `json:"tumor_group"`
	Limit      int32  `json:"limit"`
	Offset     int32  `json:"offset"`
}

func (q *Queries) GetProtocolsOnlyTumorGroupDesc(ctx context.Context, arg GetProtocolsOnlyTumorGroupDescParams) ([]Protocol, error) {
	rows, err := q.db.QueryContext(ctx, getProtocolsOnlyTumorGroupDesc, arg.TumorGroup, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Protocol{}
	for rows.Next() {
		var i Protocol
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TumorGroup,
			&i.Code,
			&i.Name,
			pq.Array(&i.Tags),
			&i.Notes,
			&i.ProtocolUrl,
			&i.PatientHandoutUrl,
			&i.RevisedOn,
			&i.ActivatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProtocol = `-- name: UpdateProtocol :one
UPDATE protocols
SET
    tumor_group = $2,
    updated_at = NOW(),
    code = $3,
    name = $4,
    tags = $5,
    notes = $6,
    protocol_url = $7,
    patient_handout_url = $8,
    revised_on = $9,
    activated_on = $10
WHERE id = $1
RETURNING id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on
`

type UpdateProtocolParams struct {
	ID                uuid.UUID `json:"id"`
	TumorGroup        string    `json:"tumor_group"`
	Code              string    `json:"code"`
	Name              string    `json:"name"`
	Tags              []string  `json:"tags"`
	Notes             string    `json:"notes"`
	ProtocolUrl       string    `json:"protocol_url"`
	PatientHandoutUrl string    `json:"patient_handout_url"`
	RevisedOn         string    `json:"revised_on"`
	ActivatedOn       string    `json:"activated_on"`
}

func (q *Queries) UpdateProtocol(ctx context.Context, arg UpdateProtocolParams) (Protocol, error) {
	row := q.db.QueryRowContext(ctx, updateProtocol,
		arg.ID,
		arg.TumorGroup,
		arg.Code,
		arg.Name,
		pq.Array(arg.Tags),
		arg.Notes,
		arg.ProtocolUrl,
		arg.PatientHandoutUrl,
		arg.RevisedOn,
		arg.ActivatedOn,
	)
	var i Protocol
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TumorGroup,
		&i.Code,
		&i.Name,
		pq.Array(&i.Tags),
		&i.Notes,
		&i.ProtocolUrl,
		&i.PatientHandoutUrl,
		&i.RevisedOn,
		&i.ActivatedOn,
	)
	return i, err
}

const upsertProtocol = `-- name: UpsertProtocol :one
WITH input_values(id, tumor_group, code,name,tags,notes,protocol_url,patient_handout_url,revised_on,activated_on) AS (
    VALUES
    (
        CASE
            WHEN $1 = '00000000-0000-0000-0000-000000000000'::uuid 
            THEN gen_random_uuid() 
            ELSE $1 
        END,        
        $2::tumor_group_enum,
        $3,
        $4,
        $5::TEXT[],
        $6,
        $7,
        $8,
        $9,
        $10       
    )
)
INSERT INTO protocols (id, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on)
SELECT id, tumor_group,code,name,tags,notes,protocol_url,patient_handout_url,revised_on,activated_on FROM input_values
ON CONFLICT (id) DO UPDATE
SET tumor_group = EXCLUDED.tumor_group::tumor_group_enum,
    code = EXCLUDED.code,
    name = EXCLUDED.name,
    tags = EXCLUDED.tags,
    notes = EXCLUDED.notes,
    protocol_url = EXCLUDED.protocol_url,
    patient_handout_url = EXCLUDED.patient_handout_url,
    revised_on = EXCLUDED.revised_on,
    activated_on = EXCLUDED.activated_on,    
    updated_at = NOW()
RETURNING id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on
`

type UpsertProtocolParams struct {
	ID                interface{}    `json:"id"`
	TumorGroup        TumorGroupEnum `json:"tumor_group"`
	Code              interface{}    `json:"code"`
	Name              interface{}    `json:"name"`
	Tags              []string       `json:"tags"`
	Notes             interface{}    `json:"notes"`
	ProtocolUrl       interface{}    `json:"protocol_url"`
	PatientHandoutUrl interface{}    `json:"patient_handout_url"`
	RevisedOn         interface{}    `json:"revised_on"`
	ActivatedOn       interface{}    `json:"activated_on"`
}

func (q *Queries) UpsertProtocol(ctx context.Context, arg UpsertProtocolParams) (Protocol, error) {
	row := q.db.QueryRowContext(ctx, upsertProtocol,
		arg.ID,
		arg.TumorGroup,
		arg.Code,
		arg.Name,
		pq.Array(arg.Tags),
		arg.Notes,
		arg.ProtocolUrl,
		arg.PatientHandoutUrl,
		arg.RevisedOn,
		arg.ActivatedOn,
	)
	var i Protocol
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TumorGroup,
		&i.Code,
		&i.Name,
		pq.Array(&i.Tags),
		&i.Notes,
		&i.ProtocolUrl,
		&i.PatientHandoutUrl,
		&i.RevisedOn,
		&i.ActivatedOn,
	)
	return i, err
}
