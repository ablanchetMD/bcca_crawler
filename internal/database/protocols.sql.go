// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: protocols.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createProtocol = `-- name: CreateProtocol :one
INSERT INTO protocols (id, created_at, updated_at, tumor_group, code, name, tags, notes)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
RETURNING id, created_at, updated_at, tumor_group, code, name, tags, notes
`

type CreateProtocolParams struct {
	CreatedAt  time.Time
	UpdatedAt  time.Time
	TumorGroup string
	Code       string
	Name       string
	Tags       []string
	Notes      string
}

func (q *Queries) CreateProtocol(ctx context.Context, arg CreateProtocolParams) (Protocol, error) {
	row := q.db.QueryRowContext(ctx, createProtocol,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.TumorGroup,
		arg.Code,
		arg.Name,
		pq.Array(arg.Tags),
		arg.Notes,
	)
	var i Protocol
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TumorGroup,
		&i.Code,
		&i.Name,
		pq.Array(&i.Tags),
		&i.Notes,
	)
	return i, err
}

const getProtocolByID = `-- name: GetProtocolByID :one
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes FROM protocols
WHERE id = $1
`

func (q *Queries) GetProtocolByID(ctx context.Context, id uuid.UUID) (Protocol, error) {
	row := q.db.QueryRowContext(ctx, getProtocolByID, id)
	var i Protocol
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TumorGroup,
		&i.Code,
		&i.Name,
		pq.Array(&i.Tags),
		&i.Notes,
	)
	return i, err
}

const getProtocols = `-- name: GetProtocols :many
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes FROM protocols
ORDER BY name ASC
`

func (q *Queries) GetProtocols(ctx context.Context) ([]Protocol, error) {
	rows, err := q.db.QueryContext(ctx, getProtocols)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Protocol
	for rows.Next() {
		var i Protocol
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TumorGroup,
			&i.Code,
			&i.Name,
			pq.Array(&i.Tags),
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProtocolsByTumorGroupAndTagsAsc = `-- name: GetProtocolsByTumorGroupAndTagsAsc :many
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes FROM protocols
WHERE tumor_group = $1
AND tags @> $2
ORDER BY name ASC
LIMIT $1 OFFSET $2
`

type GetProtocolsByTumorGroupAndTagsAscParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetProtocolsByTumorGroupAndTagsAsc(ctx context.Context, arg GetProtocolsByTumorGroupAndTagsAscParams) ([]Protocol, error) {
	rows, err := q.db.QueryContext(ctx, getProtocolsByTumorGroupAndTagsAsc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Protocol
	for rows.Next() {
		var i Protocol
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TumorGroup,
			&i.Code,
			&i.Name,
			pq.Array(&i.Tags),
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProtocolsByTumorGroupAndTagsDesc = `-- name: GetProtocolsByTumorGroupAndTagsDesc :many
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes FROM protocols
WHERE tumor_group = $1
AND tags @> $2
ORDER BY name DESC
LIMIT $1 OFFSET $2
`

type GetProtocolsByTumorGroupAndTagsDescParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetProtocolsByTumorGroupAndTagsDesc(ctx context.Context, arg GetProtocolsByTumorGroupAndTagsDescParams) ([]Protocol, error) {
	rows, err := q.db.QueryContext(ctx, getProtocolsByTumorGroupAndTagsDesc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Protocol
	for rows.Next() {
		var i Protocol
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TumorGroup,
			&i.Code,
			&i.Name,
			pq.Array(&i.Tags),
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProtocolsByTumorGroupAsc = `-- name: GetProtocolsByTumorGroupAsc :many
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes FROM protocols
WHERE tumor_group = $1
ORDER BY name ASC
LIMIT $1 OFFSET $2
`

type GetProtocolsByTumorGroupAscParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetProtocolsByTumorGroupAsc(ctx context.Context, arg GetProtocolsByTumorGroupAscParams) ([]Protocol, error) {
	rows, err := q.db.QueryContext(ctx, getProtocolsByTumorGroupAsc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Protocol
	for rows.Next() {
		var i Protocol
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TumorGroup,
			&i.Code,
			&i.Name,
			pq.Array(&i.Tags),
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProtocolsByTumorGroupDesc = `-- name: GetProtocolsByTumorGroupDesc :many
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes FROM protocols
WHERE tumor_group = $1
ORDER BY name DESC
LIMIT $1 OFFSET $2
`

type GetProtocolsByTumorGroupDescParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetProtocolsByTumorGroupDesc(ctx context.Context, arg GetProtocolsByTumorGroupDescParams) ([]Protocol, error) {
	rows, err := q.db.QueryContext(ctx, getProtocolsByTumorGroupDesc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Protocol
	for rows.Next() {
		var i Protocol
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TumorGroup,
			&i.Code,
			&i.Name,
			pq.Array(&i.Tags),
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProtocol = `-- name: UpdateProtocol :one
UPDATE protocols
SET
    tumor_group = $2,
    updated_at = NOW(),
    code = $3,
    name = $4,
    tags = $5,
    notes = $6
WHERE id = $1
RETURNING id, created_at, updated_at, tumor_group, code, name, tags, notes
`

type UpdateProtocolParams struct {
	ID         uuid.UUID
	TumorGroup string
	Code       string
	Name       string
	Tags       []string
	Notes      string
}

func (q *Queries) UpdateProtocol(ctx context.Context, arg UpdateProtocolParams) (Protocol, error) {
	row := q.db.QueryRowContext(ctx, updateProtocol,
		arg.ID,
		arg.TumorGroup,
		arg.Code,
		arg.Name,
		pq.Array(arg.Tags),
		arg.Notes,
	)
	var i Protocol
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TumorGroup,
		&i.Code,
		&i.Name,
		pq.Array(&i.Tags),
		&i.Notes,
	)
	return i, err
}
