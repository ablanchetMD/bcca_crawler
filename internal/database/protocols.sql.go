// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: protocols.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createProtocol = `-- name: CreateProtocol :one
INSERT INTO protocols (tumor_group, code, name, tags, notes)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on
`

type CreateProtocolParams struct {
	TumorGroup string   `json:"tumor_group"`
	Code       string   `json:"code"`
	Name       string   `json:"name"`
	Tags       []string `json:"tags"`
	Notes      string   `json:"notes"`
}

func (q *Queries) CreateProtocol(ctx context.Context, arg CreateProtocolParams) (Protocol, error) {
	row := q.db.QueryRowContext(ctx, createProtocol,
		arg.TumorGroup,
		arg.Code,
		arg.Name,
		pq.Array(arg.Tags),
		arg.Notes,
	)
	var i Protocol
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TumorGroup,
		&i.Code,
		&i.Name,
		pq.Array(&i.Tags),
		&i.Notes,
		&i.ProtocolUrl,
		&i.PatientHandoutUrl,
		&i.RevisedOn,
		&i.ActivatedOn,
	)
	return i, err
}

const createProtocolbyScraping = `-- name: CreateProtocolbyScraping :one
INSERT INTO protocols (tumor_group, code, name, tags, notes, revised_on, activated_on)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on
`

type CreateProtocolbyScrapingParams struct {
	TumorGroup  string   `json:"tumor_group"`
	Code        string   `json:"code"`
	Name        string   `json:"name"`
	Tags        []string `json:"tags"`
	Notes       string   `json:"notes"`
	RevisedOn   string   `json:"revised_on"`
	ActivatedOn string   `json:"activated_on"`
}

func (q *Queries) CreateProtocolbyScraping(ctx context.Context, arg CreateProtocolbyScrapingParams) (Protocol, error) {
	row := q.db.QueryRowContext(ctx, createProtocolbyScraping,
		arg.TumorGroup,
		arg.Code,
		arg.Name,
		pq.Array(arg.Tags),
		arg.Notes,
		arg.RevisedOn,
		arg.ActivatedOn,
	)
	var i Protocol
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TumorGroup,
		&i.Code,
		&i.Name,
		pq.Array(&i.Tags),
		&i.Notes,
		&i.ProtocolUrl,
		&i.PatientHandoutUrl,
		&i.RevisedOn,
		&i.ActivatedOn,
	)
	return i, err
}

const deleteProtocol = `-- name: DeleteProtocol :exec
DELETE FROM protocols
WHERE id = $1
`

func (q *Queries) DeleteProtocol(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProtocol, id)
	return err
}

const getProtocolByCode = `-- name: GetProtocolByCode :one
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on FROM protocols
WHERE code = $1
`

func (q *Queries) GetProtocolByCode(ctx context.Context, code string) (Protocol, error) {
	row := q.db.QueryRowContext(ctx, getProtocolByCode, code)
	var i Protocol
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TumorGroup,
		&i.Code,
		&i.Name,
		pq.Array(&i.Tags),
		&i.Notes,
		&i.ProtocolUrl,
		&i.PatientHandoutUrl,
		&i.RevisedOn,
		&i.ActivatedOn,
	)
	return i, err
}

const getProtocolByID = `-- name: GetProtocolByID :one
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on FROM protocols
WHERE id = $1
`

func (q *Queries) GetProtocolByID(ctx context.Context, id uuid.UUID) (Protocol, error) {
	row := q.db.QueryRowContext(ctx, getProtocolByID, id)
	var i Protocol
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TumorGroup,
		&i.Code,
		&i.Name,
		pq.Array(&i.Tags),
		&i.Notes,
		&i.ProtocolUrl,
		&i.PatientHandoutUrl,
		&i.RevisedOn,
		&i.ActivatedOn,
	)
	return i, err
}

const getProtocolsAsc = `-- name: GetProtocolsAsc :many
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on FROM protocols
ORDER BY name ASC
LIMIT $1 OFFSET $2
`

type GetProtocolsAscParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetProtocolsAsc(ctx context.Context, arg GetProtocolsAscParams) ([]Protocol, error) {
	rows, err := q.db.QueryContext(ctx, getProtocolsAsc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Protocol{}
	for rows.Next() {
		var i Protocol
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TumorGroup,
			&i.Code,
			&i.Name,
			pq.Array(&i.Tags),
			&i.Notes,
			&i.ProtocolUrl,
			&i.PatientHandoutUrl,
			&i.RevisedOn,
			&i.ActivatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProtocolsDesc = `-- name: GetProtocolsDesc :many
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on FROM protocols
ORDER BY name DESC
LIMIT $1 OFFSET $2
`

type GetProtocolsDescParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetProtocolsDesc(ctx context.Context, arg GetProtocolsDescParams) ([]Protocol, error) {
	rows, err := q.db.QueryContext(ctx, getProtocolsDesc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Protocol{}
	for rows.Next() {
		var i Protocol
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TumorGroup,
			&i.Code,
			&i.Name,
			pq.Array(&i.Tags),
			&i.Notes,
			&i.ProtocolUrl,
			&i.PatientHandoutUrl,
			&i.RevisedOn,
			&i.ActivatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProtocolsOnlyTumorGroupAndTagsAsc = `-- name: GetProtocolsOnlyTumorGroupAndTagsAsc :many
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on FROM protocols
WHERE tumor_group = $1
AND tags @> $2
ORDER BY name ASC
LIMIT $3 OFFSET $4
`

type GetProtocolsOnlyTumorGroupAndTagsAscParams struct {
	TumorGroup string   `json:"tumor_group"`
	Tags       []string `json:"tags"`
	Limit      int32    `json:"limit"`
	Offset     int32    `json:"offset"`
}

func (q *Queries) GetProtocolsOnlyTumorGroupAndTagsAsc(ctx context.Context, arg GetProtocolsOnlyTumorGroupAndTagsAscParams) ([]Protocol, error) {
	rows, err := q.db.QueryContext(ctx, getProtocolsOnlyTumorGroupAndTagsAsc,
		arg.TumorGroup,
		pq.Array(arg.Tags),
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Protocol{}
	for rows.Next() {
		var i Protocol
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TumorGroup,
			&i.Code,
			&i.Name,
			pq.Array(&i.Tags),
			&i.Notes,
			&i.ProtocolUrl,
			&i.PatientHandoutUrl,
			&i.RevisedOn,
			&i.ActivatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProtocolsOnlyTumorGroupAndTagsDesc = `-- name: GetProtocolsOnlyTumorGroupAndTagsDesc :many
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on FROM protocols
WHERE tumor_group = $1
AND tags @> $2
ORDER BY name DESC
LIMIT $3 OFFSET $4
`

type GetProtocolsOnlyTumorGroupAndTagsDescParams struct {
	TumorGroup string   `json:"tumor_group"`
	Tags       []string `json:"tags"`
	Limit      int32    `json:"limit"`
	Offset     int32    `json:"offset"`
}

func (q *Queries) GetProtocolsOnlyTumorGroupAndTagsDesc(ctx context.Context, arg GetProtocolsOnlyTumorGroupAndTagsDescParams) ([]Protocol, error) {
	rows, err := q.db.QueryContext(ctx, getProtocolsOnlyTumorGroupAndTagsDesc,
		arg.TumorGroup,
		pq.Array(arg.Tags),
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Protocol{}
	for rows.Next() {
		var i Protocol
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TumorGroup,
			&i.Code,
			&i.Name,
			pq.Array(&i.Tags),
			&i.Notes,
			&i.ProtocolUrl,
			&i.PatientHandoutUrl,
			&i.RevisedOn,
			&i.ActivatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProtocolsOnlyTumorGroupAsc = `-- name: GetProtocolsOnlyTumorGroupAsc :many
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on FROM protocols
WHERE tumor_group = $1
ORDER BY name ASC
LIMIT $2 OFFSET $3
`

type GetProtocolsOnlyTumorGroupAscParams struct {
	TumorGroup string `json:"tumor_group"`
	Limit      int32  `json:"limit"`
	Offset     int32  `json:"offset"`
}

func (q *Queries) GetProtocolsOnlyTumorGroupAsc(ctx context.Context, arg GetProtocolsOnlyTumorGroupAscParams) ([]Protocol, error) {
	rows, err := q.db.QueryContext(ctx, getProtocolsOnlyTumorGroupAsc, arg.TumorGroup, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Protocol{}
	for rows.Next() {
		var i Protocol
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TumorGroup,
			&i.Code,
			&i.Name,
			pq.Array(&i.Tags),
			&i.Notes,
			&i.ProtocolUrl,
			&i.PatientHandoutUrl,
			&i.RevisedOn,
			&i.ActivatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProtocolsOnlyTumorGroupDesc = `-- name: GetProtocolsOnlyTumorGroupDesc :many
SELECT id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on FROM protocols
WHERE tumor_group = $1
ORDER BY name DESC
LIMIT $2 OFFSET $3
`

type GetProtocolsOnlyTumorGroupDescParams struct {
	TumorGroup string `json:"tumor_group"`
	Limit      int32  `json:"limit"`
	Offset     int32  `json:"offset"`
}

func (q *Queries) GetProtocolsOnlyTumorGroupDesc(ctx context.Context, arg GetProtocolsOnlyTumorGroupDescParams) ([]Protocol, error) {
	rows, err := q.db.QueryContext(ctx, getProtocolsOnlyTumorGroupDesc, arg.TumorGroup, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Protocol{}
	for rows.Next() {
		var i Protocol
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TumorGroup,
			&i.Code,
			&i.Name,
			pq.Array(&i.Tags),
			&i.Notes,
			&i.ProtocolUrl,
			&i.PatientHandoutUrl,
			&i.RevisedOn,
			&i.ActivatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProtocol = `-- name: UpdateProtocol :one
UPDATE protocols
SET
    tumor_group = $2,
    updated_at = NOW(),
    code = $3,
    name = $4,
    tags = $5,
    notes = $6,
    protocol_url = $7,
    patient_handout_url = $8,
    revised_on = $9,
    activated_on = $10
WHERE id = $1
RETURNING id, created_at, updated_at, tumor_group, code, name, tags, notes, protocol_url, patient_handout_url, revised_on, activated_on
`

type UpdateProtocolParams struct {
	ID                uuid.UUID `json:"id"`
	TumorGroup        string    `json:"tumor_group"`
	Code              string    `json:"code"`
	Name              string    `json:"name"`
	Tags              []string  `json:"tags"`
	Notes             string    `json:"notes"`
	ProtocolUrl       string    `json:"protocol_url"`
	PatientHandoutUrl string    `json:"patient_handout_url"`
	RevisedOn         string    `json:"revised_on"`
	ActivatedOn       string    `json:"activated_on"`
}

func (q *Queries) UpdateProtocol(ctx context.Context, arg UpdateProtocolParams) (Protocol, error) {
	row := q.db.QueryRowContext(ctx, updateProtocol,
		arg.ID,
		arg.TumorGroup,
		arg.Code,
		arg.Name,
		pq.Array(arg.Tags),
		arg.Notes,
		arg.ProtocolUrl,
		arg.PatientHandoutUrl,
		arg.RevisedOn,
		arg.ActivatedOn,
	)
	var i Protocol
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TumorGroup,
		&i.Code,
		&i.Name,
		pq.Array(&i.Tags),
		&i.Notes,
		&i.ProtocolUrl,
		&i.PatientHandoutUrl,
		&i.RevisedOn,
		&i.ActivatedOn,
	)
	return i, err
}
