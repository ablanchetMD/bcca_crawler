// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: medications.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addMedication = `-- name: AddMedication :one
INSERT INTO medications (name, description, category)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, name, description, category
`

type AddMedicationParams struct {
	Name        string
	Description string
	Category    string
}

func (q *Queries) AddMedication(ctx context.Context, arg AddMedicationParams) (Medication, error) {
	row := q.db.QueryRowContext(ctx, addMedication, arg.Name, arg.Description, arg.Category)
	var i Medication
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Category,
	)
	return i, err
}

const addMedicationModification = `-- name: AddMedicationModification :one
INSERT INTO medication_modifications (category, description, adjustment, medication_id)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, category, description, adjustment, medication_id
`

type AddMedicationModificationParams struct {
	Category     string
	Description  string
	Adjustment   string
	MedicationID uuid.UUID
}

func (q *Queries) AddMedicationModification(ctx context.Context, arg AddMedicationModificationParams) (MedicationModification, error) {
	row := q.db.QueryRowContext(ctx, addMedicationModification,
		arg.Category,
		arg.Description,
		arg.Adjustment,
		arg.MedicationID,
	)
	var i MedicationModification
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Category,
		&i.Description,
		&i.Adjustment,
		&i.MedicationID,
	)
	return i, err
}

const addPreMedicationToProtocol = `-- name: AddPreMedicationToProtocol :exec
INSERT INTO protocol_pre_medications_values (protocol_id, medication_prescription_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type AddPreMedicationToProtocolParams struct {
	ProtocolID               uuid.UUID
	MedicationPrescriptionID uuid.UUID
}

func (q *Queries) AddPreMedicationToProtocol(ctx context.Context, arg AddPreMedicationToProtocolParams) error {
	_, err := q.db.ExecContext(ctx, addPreMedicationToProtocol, arg.ProtocolID, arg.MedicationPrescriptionID)
	return err
}

const addPrescription = `-- name: AddPrescription :one
INSERT INTO medication_prescription (medication, dose, route, frequency, duration, instructions, renewals)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, updated_at, medication, dose, route, frequency, duration, instructions, renewals
`

type AddPrescriptionParams struct {
	Medication   uuid.UUID
	Dose         string
	Route        string
	Frequency    string
	Duration     string
	Instructions string
	Renewals     int32
}

func (q *Queries) AddPrescription(ctx context.Context, arg AddPrescriptionParams) (MedicationPrescription, error) {
	row := q.db.QueryRowContext(ctx, addPrescription,
		arg.Medication,
		arg.Dose,
		arg.Route,
		arg.Frequency,
		arg.Duration,
		arg.Instructions,
		arg.Renewals,
	)
	var i MedicationPrescription
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Medication,
		&i.Dose,
		&i.Route,
		&i.Frequency,
		&i.Duration,
		&i.Instructions,
		&i.Renewals,
	)
	return i, err
}

const addSupportiveMedicationToProtocol = `-- name: AddSupportiveMedicationToProtocol :exec
INSERT INTO protocol_supportive_medication_values (protocol_id, medication_prescription_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type AddSupportiveMedicationToProtocolParams struct {
	ProtocolID               uuid.UUID
	MedicationPrescriptionID uuid.UUID
}

func (q *Queries) AddSupportiveMedicationToProtocol(ctx context.Context, arg AddSupportiveMedicationToProtocolParams) error {
	_, err := q.db.ExecContext(ctx, addSupportiveMedicationToProtocol, arg.ProtocolID, arg.MedicationPrescriptionID)
	return err
}

const getMedicationByID = `-- name: GetMedicationByID :one
SELECT id, created_at, updated_at, name, description, category FROM medications
WHERE id = $1
`

func (q *Queries) GetMedicationByID(ctx context.Context, id uuid.UUID) (Medication, error) {
	row := q.db.QueryRowContext(ctx, getMedicationByID, id)
	var i Medication
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Category,
	)
	return i, err
}

const getMedicationByName = `-- name: GetMedicationByName :one
SELECT id, created_at, updated_at, name, description, category FROM medications
WHERE name = $1
`

func (q *Queries) GetMedicationByName(ctx context.Context, name string) (Medication, error) {
	row := q.db.QueryRowContext(ctx, getMedicationByName, name)
	var i Medication
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Category,
	)
	return i, err
}

const getMedicationModificationsByProtocol = `-- name: GetMedicationModificationsByProtocol :many
SELECT m.id as medication_id, m.name, m.description, m.category, mod.id as modification_id, mod.category as modification_category, mod.description as modification_description, mod.adjustment
FROM medication_modifications mod
JOIN medications m ON mod.medication_id = m.id
JOIN protocol_treatment pt ON m.id = pt.medication
JOIN treatment_cycles_values tc ON pt.id = tc.protocol_treatment_id
JOIN protocol_cycles pc ON tc.protocol_cycles_id = pc.id
WHERE pc.protocol_id = $1
`

type GetMedicationModificationsByProtocolRow struct {
	MedicationID            uuid.UUID
	Name                    string
	Description             string
	Category                string
	ModificationID          uuid.UUID
	ModificationCategory    string
	ModificationDescription string
	Adjustment              string
}

func (q *Queries) GetMedicationModificationsByProtocol(ctx context.Context, protocolID uuid.UUID) ([]GetMedicationModificationsByProtocolRow, error) {
	rows, err := q.db.QueryContext(ctx, getMedicationModificationsByProtocol, protocolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMedicationModificationsByProtocolRow
	for rows.Next() {
		var i GetMedicationModificationsByProtocolRow
		if err := rows.Scan(
			&i.MedicationID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.ModificationID,
			&i.ModificationCategory,
			&i.ModificationDescription,
			&i.Adjustment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMedications = `-- name: GetMedications :many
SELECT id, created_at, updated_at, name, description, category FROM medications
ORDER BY name ASC
`

func (q *Queries) GetMedications(ctx context.Context) ([]Medication, error) {
	rows, err := q.db.QueryContext(ctx, getMedications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Medication
	for rows.Next() {
		var i Medication
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMedicationsByCategory = `-- name: GetMedicationsByCategory :many
SELECT id, created_at, updated_at, name, description, category FROM medications
WHERE category = $1
ORDER BY name ASC
`

func (q *Queries) GetMedicationsByCategory(ctx context.Context, category string) ([]Medication, error) {
	rows, err := q.db.QueryContext(ctx, getMedicationsByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Medication
	for rows.Next() {
		var i Medication
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getModificationsByMedication = `-- name: GetModificationsByMedication :many
SELECT id, created_at, updated_at, category, description, adjustment, medication_id FROM medication_modifications
WHERE medication_id = $1
`

func (q *Queries) GetModificationsByMedication(ctx context.Context, medicationID uuid.UUID) ([]MedicationModification, error) {
	rows, err := q.db.QueryContext(ctx, getModificationsByMedication, medicationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MedicationModification
	for rows.Next() {
		var i MedicationModification
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Category,
			&i.Description,
			&i.Adjustment,
			&i.MedicationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPreMedicationsByProtocol = `-- name: GetPreMedicationsByProtocol :many
SELECT m.id as medication_id, m.name, m.description, m.category, p.id as medication_prescription_id, p.dose, p.route, p.frequency, p.duration, p.instructions, p.renewals
FROM medications m
JOIN medication_prescription p ON m.id = p.medication
JOIN protocol_pre_medications_values s ON p.id = s.medication_prescription_id
WHERE s.protocol_id = $1
`

type GetPreMedicationsByProtocolRow struct {
	MedicationID             uuid.UUID
	Name                     string
	Description              string
	Category                 string
	MedicationPrescriptionID uuid.UUID
	Dose                     string
	Route                    string
	Frequency                string
	Duration                 string
	Instructions             string
	Renewals                 int32
}

func (q *Queries) GetPreMedicationsByProtocol(ctx context.Context, protocolID uuid.UUID) ([]GetPreMedicationsByProtocolRow, error) {
	rows, err := q.db.QueryContext(ctx, getPreMedicationsByProtocol, protocolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPreMedicationsByProtocolRow
	for rows.Next() {
		var i GetPreMedicationsByProtocolRow
		if err := rows.Scan(
			&i.MedicationID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.MedicationPrescriptionID,
			&i.Dose,
			&i.Route,
			&i.Frequency,
			&i.Duration,
			&i.Instructions,
			&i.Renewals,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSupportiveMedicationsByProtocol = `-- name: GetSupportiveMedicationsByProtocol :many
SELECT m.id as medication_id, m.name, m.description, m.category, p.id as medication_prescription_id, p.dose, p.route, p.frequency, p.duration, p.instructions, p.renewals
FROM medications m
JOIN medication_prescription p ON m.id = p.medication
JOIN protocol_supportive_medication_values s ON p.id = s.medication_prescription_id
WHERE s.protocol_id = $1
`

type GetSupportiveMedicationsByProtocolRow struct {
	MedicationID             uuid.UUID
	Name                     string
	Description              string
	Category                 string
	MedicationPrescriptionID uuid.UUID
	Dose                     string
	Route                    string
	Frequency                string
	Duration                 string
	Instructions             string
	Renewals                 int32
}

func (q *Queries) GetSupportiveMedicationsByProtocol(ctx context.Context, protocolID uuid.UUID) ([]GetSupportiveMedicationsByProtocolRow, error) {
	rows, err := q.db.QueryContext(ctx, getSupportiveMedicationsByProtocol, protocolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSupportiveMedicationsByProtocolRow
	for rows.Next() {
		var i GetSupportiveMedicationsByProtocolRow
		if err := rows.Scan(
			&i.MedicationID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.MedicationPrescriptionID,
			&i.Dose,
			&i.Route,
			&i.Frequency,
			&i.Duration,
			&i.Instructions,
			&i.Renewals,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeMedicationModification = `-- name: RemoveMedicationModification :exec
DELETE FROM medication_modifications
WHERE id = $1
`

func (q *Queries) RemoveMedicationModification(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeMedicationModification, id)
	return err
}

const removePreMedicationFromProtocol = `-- name: RemovePreMedicationFromProtocol :exec
DELETE FROM protocol_pre_medications_values
WHERE protocol_id = $1 AND medication_prescription_id = $2
`

type RemovePreMedicationFromProtocolParams struct {
	ProtocolID               uuid.UUID
	MedicationPrescriptionID uuid.UUID
}

func (q *Queries) RemovePreMedicationFromProtocol(ctx context.Context, arg RemovePreMedicationFromProtocolParams) error {
	_, err := q.db.ExecContext(ctx, removePreMedicationFromProtocol, arg.ProtocolID, arg.MedicationPrescriptionID)
	return err
}

const removePrescription = `-- name: RemovePrescription :exec
DELETE FROM medication_prescription
WHERE id = $1
`

func (q *Queries) RemovePrescription(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removePrescription, id)
	return err
}

const removeSupportiveMedicationFromProtocol = `-- name: RemoveSupportiveMedicationFromProtocol :exec
DELETE FROM protocol_supportive_medication_values
WHERE protocol_id = $1 AND medication_prescription_id = $2
`

type RemoveSupportiveMedicationFromProtocolParams struct {
	ProtocolID               uuid.UUID
	MedicationPrescriptionID uuid.UUID
}

func (q *Queries) RemoveSupportiveMedicationFromProtocol(ctx context.Context, arg RemoveSupportiveMedicationFromProtocolParams) error {
	_, err := q.db.ExecContext(ctx, removeSupportiveMedicationFromProtocol, arg.ProtocolID, arg.MedicationPrescriptionID)
	return err
}

const updateMedicationModification = `-- name: UpdateMedicationModification :one
UPDATE medication_modifications
SET
    updated_at = NOW(),
    category = $2,
    description = $3,
    adjustment = $4,
    medication_id = $5
WHERE id = $1
RETURNING id, created_at, updated_at, category, description, adjustment, medication_id
`

type UpdateMedicationModificationParams struct {
	ID           uuid.UUID
	Category     string
	Description  string
	Adjustment   string
	MedicationID uuid.UUID
}

func (q *Queries) UpdateMedicationModification(ctx context.Context, arg UpdateMedicationModificationParams) (MedicationModification, error) {
	row := q.db.QueryRowContext(ctx, updateMedicationModification,
		arg.ID,
		arg.Category,
		arg.Description,
		arg.Adjustment,
		arg.MedicationID,
	)
	var i MedicationModification
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Category,
		&i.Description,
		&i.Adjustment,
		&i.MedicationID,
	)
	return i, err
}
