// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: medications.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addManyMedications = `-- name: AddManyMedications :many
INSERT INTO medications (name, description, category)
VALUES ($1::TEXT[], $2::TEXT[], $3::TEXT[])
ON CONFLICT (name) DO NOTHING
RETURNING id, created_at, updated_at, name, description, category
`

type AddManyMedicationsParams struct {
	Column1 []string
	Column2 []string
	Column3 []string
}

func (q *Queries) AddManyMedications(ctx context.Context, arg AddManyMedicationsParams) ([]Medication, error) {
	rows, err := q.db.QueryContext(ctx, addManyMedications, pq.Array(arg.Column1), pq.Array(arg.Column2), pq.Array(arg.Column3))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Medication
	for rows.Next() {
		var i Medication
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const addMedication = `-- name: AddMedication :one
INSERT INTO medications (name, description, category)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, name, description, category
`

type AddMedicationParams struct {
	Name        string
	Description sql.NullString
	Category    string
}

func (q *Queries) AddMedication(ctx context.Context, arg AddMedicationParams) (Medication, error) {
	row := q.db.QueryRowContext(ctx, addMedication, arg.Name, arg.Description, arg.Category)
	var i Medication
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Category,
	)
	return i, err
}

const addPreMedication = `-- name: AddPreMedication :one
INSERT INTO protocol_premedication (medication, dose, route, frequency, duration, notes)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, medication, dose, route, frequency, duration, notes
`

type AddPreMedicationParams struct {
	Medication uuid.UUID
	Dose       string
	Route      string
	Frequency  string
	Duration   string
	Notes      string
}

func (q *Queries) AddPreMedication(ctx context.Context, arg AddPreMedicationParams) (ProtocolPremedication, error) {
	row := q.db.QueryRowContext(ctx, addPreMedication,
		arg.Medication,
		arg.Dose,
		arg.Route,
		arg.Frequency,
		arg.Duration,
		arg.Notes,
	)
	var i ProtocolPremedication
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Medication,
		&i.Dose,
		&i.Route,
		&i.Frequency,
		&i.Duration,
		&i.Notes,
	)
	return i, err
}

const addPreMedicationToProtocol = `-- name: AddPreMedicationToProtocol :exec
INSERT INTO protocol_pre_medications_values (protocol_id, pre_medication_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type AddPreMedicationToProtocolParams struct {
	ProtocolID      uuid.UUID
	PreMedicationID uuid.UUID
}

func (q *Queries) AddPreMedicationToProtocol(ctx context.Context, arg AddPreMedicationToProtocolParams) error {
	_, err := q.db.ExecContext(ctx, addPreMedicationToProtocol, arg.ProtocolID, arg.PreMedicationID)
	return err
}

const addSupportiveMedication = `-- name: AddSupportiveMedication :one
INSERT INTO protocol_supportive_medication (medication, dose, route, frequency, duration, notes)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, medication, dose, route, frequency, duration, notes
`

type AddSupportiveMedicationParams struct {
	Medication uuid.UUID
	Dose       string
	Route      string
	Frequency  string
	Duration   string
	Notes      string
}

func (q *Queries) AddSupportiveMedication(ctx context.Context, arg AddSupportiveMedicationParams) (ProtocolSupportiveMedication, error) {
	row := q.db.QueryRowContext(ctx, addSupportiveMedication,
		arg.Medication,
		arg.Dose,
		arg.Route,
		arg.Frequency,
		arg.Duration,
		arg.Notes,
	)
	var i ProtocolSupportiveMedication
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Medication,
		&i.Dose,
		&i.Route,
		&i.Frequency,
		&i.Duration,
		&i.Notes,
	)
	return i, err
}

const addSupportiveMedicationToProtocol = `-- name: AddSupportiveMedicationToProtocol :exec
INSERT INTO protocol_supportive_medication_values (protocol_id, supportive_medication_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type AddSupportiveMedicationToProtocolParams struct {
	ProtocolID             uuid.UUID
	SupportiveMedicationID uuid.UUID
}

func (q *Queries) AddSupportiveMedicationToProtocol(ctx context.Context, arg AddSupportiveMedicationToProtocolParams) error {
	_, err := q.db.ExecContext(ctx, addSupportiveMedicationToProtocol, arg.ProtocolID, arg.SupportiveMedicationID)
	return err
}

const getMedicationByID = `-- name: GetMedicationByID :one
SELECT id, created_at, updated_at, name, description, category FROM medications
WHERE id = $1
`

func (q *Queries) GetMedicationByID(ctx context.Context, id uuid.UUID) (Medication, error) {
	row := q.db.QueryRowContext(ctx, getMedicationByID, id)
	var i Medication
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Category,
	)
	return i, err
}

const getMedicationByName = `-- name: GetMedicationByName :one
SELECT id, created_at, updated_at, name, description, category FROM medications
WHERE name = $1
`

func (q *Queries) GetMedicationByName(ctx context.Context, name string) (Medication, error) {
	row := q.db.QueryRowContext(ctx, getMedicationByName, name)
	var i Medication
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Category,
	)
	return i, err
}

const getMedications = `-- name: GetMedications :many
SELECT id, created_at, updated_at, name, description, category FROM medications
ORDER BY name ASC
`

func (q *Queries) GetMedications(ctx context.Context) ([]Medication, error) {
	rows, err := q.db.QueryContext(ctx, getMedications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Medication
	for rows.Next() {
		var i Medication
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMedicationsByCategory = `-- name: GetMedicationsByCategory :many
SELECT id, created_at, updated_at, name, description, category FROM medications
WHERE category = $1
ORDER BY name ASC
`

func (q *Queries) GetMedicationsByCategory(ctx context.Context, category string) ([]Medication, error) {
	rows, err := q.db.QueryContext(ctx, getMedicationsByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Medication
	for rows.Next() {
		var i Medication
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPreMedicationsByProtocol = `-- name: GetPreMedicationsByProtocol :many
SELECT m.id as medication_id, m.name, m.description, m.category, s.id as pre_medication_id, s.dose, s.route, s.frequency, s.duration, s.notes
FROM medications m
JOIN protocol_premedication s ON m.id = s.medication
JOIN protocol_pre_medications_values p ON s.id = p.pre_medication_id
WHERE p.protocol_id = $1
`

type GetPreMedicationsByProtocolRow struct {
	MedicationID    uuid.UUID
	Name            string
	Description     sql.NullString
	Category        string
	PreMedicationID uuid.UUID
	Dose            string
	Route           string
	Frequency       string
	Duration        string
	Notes           string
}

func (q *Queries) GetPreMedicationsByProtocol(ctx context.Context, protocolID uuid.UUID) ([]GetPreMedicationsByProtocolRow, error) {
	rows, err := q.db.QueryContext(ctx, getPreMedicationsByProtocol, protocolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPreMedicationsByProtocolRow
	for rows.Next() {
		var i GetPreMedicationsByProtocolRow
		if err := rows.Scan(
			&i.MedicationID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.PreMedicationID,
			&i.Dose,
			&i.Route,
			&i.Frequency,
			&i.Duration,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSupportiveMedicationsByProtocol = `-- name: GetSupportiveMedicationsByProtocol :many
SELECT m.id as medication_id, m.name, m.description, m.category, p.id as supportive_medication_id, p.dose, p.route, p.frequency, p.duration, p.notes
FROM medications m
JOIN protocol_supportive_medication p ON m.id = p.medication
JOIN protocol_supportive_medication_values s ON p.id = s.supportive_medication_id
WHERE s.protocol_id = $1
`

type GetSupportiveMedicationsByProtocolRow struct {
	MedicationID           uuid.UUID
	Name                   string
	Description            sql.NullString
	Category               string
	SupportiveMedicationID uuid.UUID
	Dose                   string
	Route                  string
	Frequency              string
	Duration               string
	Notes                  string
}

func (q *Queries) GetSupportiveMedicationsByProtocol(ctx context.Context, protocolID uuid.UUID) ([]GetSupportiveMedicationsByProtocolRow, error) {
	rows, err := q.db.QueryContext(ctx, getSupportiveMedicationsByProtocol, protocolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSupportiveMedicationsByProtocolRow
	for rows.Next() {
		var i GetSupportiveMedicationsByProtocolRow
		if err := rows.Scan(
			&i.MedicationID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.SupportiveMedicationID,
			&i.Dose,
			&i.Route,
			&i.Frequency,
			&i.Duration,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePreMedication = `-- name: RemovePreMedication :exec
DELETE FROM protocol_premedication
WHERE id = $1
`

func (q *Queries) RemovePreMedication(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removePreMedication, id)
	return err
}

const removePreMedicationFromProtocol = `-- name: RemovePreMedicationFromProtocol :exec
DELETE FROM protocol_pre_medications_values
WHERE protocol_id = $1 AND pre_medication_id = $2
`

type RemovePreMedicationFromProtocolParams struct {
	ProtocolID      uuid.UUID
	PreMedicationID uuid.UUID
}

func (q *Queries) RemovePreMedicationFromProtocol(ctx context.Context, arg RemovePreMedicationFromProtocolParams) error {
	_, err := q.db.ExecContext(ctx, removePreMedicationFromProtocol, arg.ProtocolID, arg.PreMedicationID)
	return err
}

const removeSupportiveMedication = `-- name: RemoveSupportiveMedication :exec
DELETE FROM protocol_supportive_medication
WHERE id = $1
`

func (q *Queries) RemoveSupportiveMedication(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeSupportiveMedication, id)
	return err
}

const removeSupportiveMedicationFromProtocol = `-- name: RemoveSupportiveMedicationFromProtocol :exec
DELETE FROM protocol_supportive_medication_values
WHERE protocol_id = $1 AND supportive_medication_id = $2
`

type RemoveSupportiveMedicationFromProtocolParams struct {
	ProtocolID             uuid.UUID
	SupportiveMedicationID uuid.UUID
}

func (q *Queries) RemoveSupportiveMedicationFromProtocol(ctx context.Context, arg RemoveSupportiveMedicationFromProtocolParams) error {
	_, err := q.db.ExecContext(ctx, removeSupportiveMedicationFromProtocol, arg.ProtocolID, arg.SupportiveMedicationID)
	return err
}
