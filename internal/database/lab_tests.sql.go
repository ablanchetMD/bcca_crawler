// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: lab_tests.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addBaselineTest = `-- name: AddBaselineTest :exec
INSERT INTO protocol_baseline_tests (protocol_id, test_id)
VALUES ($1, $2)
`

type AddBaselineTestParams struct {
	ProtocolID uuid.UUID
	TestID     uuid.UUID
}

func (q *Queries) AddBaselineTest(ctx context.Context, arg AddBaselineTestParams) error {
	_, err := q.db.ExecContext(ctx, addBaselineTest, arg.ProtocolID, arg.TestID)
	return err
}

const addFollowupIfNecessaryTest = `-- name: AddFollowupIfNecessaryTest :exec
INSERT INTO protocol_followup_tests_if_necessary (protocol_id, test_id)
VALUES ($1, $2)
`

type AddFollowupIfNecessaryTestParams struct {
	ProtocolID uuid.UUID
	TestID     uuid.UUID
}

func (q *Queries) AddFollowupIfNecessaryTest(ctx context.Context, arg AddFollowupIfNecessaryTestParams) error {
	_, err := q.db.ExecContext(ctx, addFollowupIfNecessaryTest, arg.ProtocolID, arg.TestID)
	return err
}

const addFollowupTest = `-- name: AddFollowupTest :exec
INSERT INTO protocol_followup_tests (protocol_id, test_id)
VALUES ($1, $2)
`

type AddFollowupTestParams struct {
	ProtocolID uuid.UUID
	TestID     uuid.UUID
}

func (q *Queries) AddFollowupTest(ctx context.Context, arg AddFollowupTestParams) error {
	_, err := q.db.ExecContext(ctx, addFollowupTest, arg.ProtocolID, arg.TestID)
	return err
}

const addIfNecessaryTest = `-- name: AddIfNecessaryTest :exec
INSERT INTO protocol_baseline_tests_if_necessary (protocol_id, test_id)
VALUES ($1, $2)
`

type AddIfNecessaryTestParams struct {
	ProtocolID uuid.UUID
	TestID     uuid.UUID
}

func (q *Queries) AddIfNecessaryTest(ctx context.Context, arg AddIfNecessaryTestParams) error {
	_, err := q.db.ExecContext(ctx, addIfNecessaryTest, arg.ProtocolID, arg.TestID)
	return err
}

const addManyTests = `-- name: AddManyTests :exec
INSERT INTO tests (name, description)
VALUES ($1::TEXT[], $2::TEXT[])
ON CONFLICT (name) DO NOTHING
`

type AddManyTestsParams struct {
	Column1 []string
	Column2 []string
}

func (q *Queries) AddManyTests(ctx context.Context, arg AddManyTestsParams) error {
	_, err := q.db.ExecContext(ctx, addManyTests, pq.Array(arg.Column1), pq.Array(arg.Column2))
	return err
}

const addNonUrgentTest = `-- name: AddNonUrgentTest :exec
INSERT INTO protocol_baseline_tests_non_urgent (protocol_id, test_id)
VALUES ($1, $2)
`

type AddNonUrgentTestParams struct {
	ProtocolID uuid.UUID
	TestID     uuid.UUID
}

func (q *Queries) AddNonUrgentTest(ctx context.Context, arg AddNonUrgentTestParams) error {
	_, err := q.db.ExecContext(ctx, addNonUrgentTest, arg.ProtocolID, arg.TestID)
	return err
}

const addTest = `-- name: AddTest :one
INSERT INTO tests (name, description)
VALUES ($1, $2)
RETURNING id, created_at, updated_at, name, description
`

type AddTestParams struct {
	Name        string
	Description sql.NullString
}

func (q *Queries) AddTest(ctx context.Context, arg AddTestParams) (Test, error) {
	row := q.db.QueryRowContext(ctx, addTest, arg.Name, arg.Description)
	var i Test
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const getBaselineTestsByProtocol = `-- name: GetBaselineTestsByProtocol :many
SELECT t.id, t.created_at, t.updated_at, t.name, t.description
FROM tests t
JOIN protocol_baseline_tests pb ON t.id = pb.test_id
WHERE pb.protocol_id = $1
`

func (q *Queries) GetBaselineTestsByProtocol(ctx context.Context, protocolID uuid.UUID) ([]Test, error) {
	rows, err := q.db.QueryContext(ctx, getBaselineTestsByProtocol, protocolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Test
	for rows.Next() {
		var i Test
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowupIfNecessaryTestsByProtocol = `-- name: GetFollowupIfNecessaryTestsByProtocol :many
SELECT t.id, t.created_at, t.updated_at, t.name, t.description
FROM tests t
JOIN protocol_followup_tests_if_necessary pb ON t.id = pb.test_id
WHERE pb.protocol_id = $1
`

func (q *Queries) GetFollowupIfNecessaryTestsByProtocol(ctx context.Context, protocolID uuid.UUID) ([]Test, error) {
	rows, err := q.db.QueryContext(ctx, getFollowupIfNecessaryTestsByProtocol, protocolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Test
	for rows.Next() {
		var i Test
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowupTestsByProtocol = `-- name: GetFollowupTestsByProtocol :many
SELECT t.id, t.created_at, t.updated_at, t.name, t.description
FROM tests t
JOIN protocol_followup_tests pb ON t.id = pb.test_id
WHERE pb.protocol_id = $1
`

func (q *Queries) GetFollowupTestsByProtocol(ctx context.Context, protocolID uuid.UUID) ([]Test, error) {
	rows, err := q.db.QueryContext(ctx, getFollowupTestsByProtocol, protocolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Test
	for rows.Next() {
		var i Test
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIfNecessaryTestsByProtocol = `-- name: GetIfNecessaryTestsByProtocol :many
SELECT t.id, t.created_at, t.updated_at, t.name, t.description
FROM tests t
JOIN protocol_baseline_tests_if_necessary pb ON t.id = pb.test_id
WHERE pb.protocol_id = $1
`

func (q *Queries) GetIfNecessaryTestsByProtocol(ctx context.Context, protocolID uuid.UUID) ([]Test, error) {
	rows, err := q.db.QueryContext(ctx, getIfNecessaryTestsByProtocol, protocolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Test
	for rows.Next() {
		var i Test
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNonUrgentTestsByProtocol = `-- name: GetNonUrgentTestsByProtocol :many
SELECT t.id, t.created_at, t.updated_at, t.name, t.description
FROM tests t
JOIN protocol_baseline_tests_non_urgent pb ON t.id = pb.test_id
WHERE pb.protocol_id = $1
`

func (q *Queries) GetNonUrgentTestsByProtocol(ctx context.Context, protocolID uuid.UUID) ([]Test, error) {
	rows, err := q.db.QueryContext(ctx, getNonUrgentTestsByProtocol, protocolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Test
	for rows.Next() {
		var i Test
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTestByName = `-- name: GetTestByName :one
SELECT id, created_at, updated_at, name, description FROM tests WHERE name = $1
`

func (q *Queries) GetTestByName(ctx context.Context, name string) (Test, error) {
	row := q.db.QueryRowContext(ctx, getTestByName, name)
	var i Test
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const removeBaselineTest = `-- name: RemoveBaselineTest :exec
DELETE FROM protocol_baseline_tests
WHERE protocol_id = $1 AND test_id = $2
`

type RemoveBaselineTestParams struct {
	ProtocolID uuid.UUID
	TestID     uuid.UUID
}

func (q *Queries) RemoveBaselineTest(ctx context.Context, arg RemoveBaselineTestParams) error {
	_, err := q.db.ExecContext(ctx, removeBaselineTest, arg.ProtocolID, arg.TestID)
	return err
}

const removeFollowupIfNecessaryTest = `-- name: RemoveFollowupIfNecessaryTest :exec
DELETE FROM protocol_followup_tests_if_necessary
WHERE protocol_id = $1 AND test_id = $2
`

type RemoveFollowupIfNecessaryTestParams struct {
	ProtocolID uuid.UUID
	TestID     uuid.UUID
}

func (q *Queries) RemoveFollowupIfNecessaryTest(ctx context.Context, arg RemoveFollowupIfNecessaryTestParams) error {
	_, err := q.db.ExecContext(ctx, removeFollowupIfNecessaryTest, arg.ProtocolID, arg.TestID)
	return err
}

const removeFollowupTest = `-- name: RemoveFollowupTest :exec
DELETE FROM protocol_followup_tests
WHERE protocol_id = $1 AND test_id = $2
`

type RemoveFollowupTestParams struct {
	ProtocolID uuid.UUID
	TestID     uuid.UUID
}

func (q *Queries) RemoveFollowupTest(ctx context.Context, arg RemoveFollowupTestParams) error {
	_, err := q.db.ExecContext(ctx, removeFollowupTest, arg.ProtocolID, arg.TestID)
	return err
}

const removeIfNecessaryTest = `-- name: RemoveIfNecessaryTest :exec
DELETE FROM protocol_baseline_tests_if_necessary
WHERE protocol_id = $1 AND test_id = $2
`

type RemoveIfNecessaryTestParams struct {
	ProtocolID uuid.UUID
	TestID     uuid.UUID
}

func (q *Queries) RemoveIfNecessaryTest(ctx context.Context, arg RemoveIfNecessaryTestParams) error {
	_, err := q.db.ExecContext(ctx, removeIfNecessaryTest, arg.ProtocolID, arg.TestID)
	return err
}

const removeNonUrgentTest = `-- name: RemoveNonUrgentTest :exec
DELETE FROM protocol_baseline_tests_non_urgent
WHERE protocol_id = $1 AND test_id = $2
`

type RemoveNonUrgentTestParams struct {
	ProtocolID uuid.UUID
	TestID     uuid.UUID
}

func (q *Queries) RemoveNonUrgentTest(ctx context.Context, arg RemoveNonUrgentTestParams) error {
	_, err := q.db.ExecContext(ctx, removeNonUrgentTest, arg.ProtocolID, arg.TestID)
	return err
}
