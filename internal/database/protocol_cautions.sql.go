// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: protocol_cautions.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addManyProtocolCautionToProtocol = `-- name: AddManyProtocolCautionToProtocol :exec
INSERT INTO protocol_cautions_values (protocol_id, caution_id) VALUES ($1::UUID[], $2::UUID[]) ON CONFLICT DO NOTHING
`

type AddManyProtocolCautionToProtocolParams struct {
	Column1 []uuid.UUID `json:"column_1"`
	Column2 []uuid.UUID `json:"column_2"`
}

func (q *Queries) AddManyProtocolCautionToProtocol(ctx context.Context, arg AddManyProtocolCautionToProtocolParams) error {
	_, err := q.db.ExecContext(ctx, addManyProtocolCautionToProtocol, pq.Array(arg.Column1), pq.Array(arg.Column2))
	return err
}

const addManyProtocolPrecautionToProtocol = `-- name: AddManyProtocolPrecautionToProtocol :exec
INSERT INTO protocol_precautions_values (protocol_id, precaution_id) VALUES ($1::UUID[], $2::UUID[]) ON CONFLICT DO NOTHING
`

type AddManyProtocolPrecautionToProtocolParams struct {
	Column1 []uuid.UUID `json:"column_1"`
	Column2 []uuid.UUID `json:"column_2"`
}

func (q *Queries) AddManyProtocolPrecautionToProtocol(ctx context.Context, arg AddManyProtocolPrecautionToProtocolParams) error {
	_, err := q.db.ExecContext(ctx, addManyProtocolPrecautionToProtocol, pq.Array(arg.Column1), pq.Array(arg.Column2))
	return err
}

const addProtocolCautionToProtocol = `-- name: AddProtocolCautionToProtocol :exec
INSERT INTO protocol_cautions_values (protocol_id, caution_id) VALUES ($1, $2)
`

type AddProtocolCautionToProtocolParams struct {
	ProtocolID uuid.UUID `json:"protocol_id"`
	CautionID  uuid.UUID `json:"caution_id"`
}

func (q *Queries) AddProtocolCautionToProtocol(ctx context.Context, arg AddProtocolCautionToProtocolParams) error {
	_, err := q.db.ExecContext(ctx, addProtocolCautionToProtocol, arg.ProtocolID, arg.CautionID)
	return err
}

const addProtocolPrecautionToProtocol = `-- name: AddProtocolPrecautionToProtocol :exec
INSERT INTO protocol_precautions_values (protocol_id, precaution_id) VALUES ($1, $2)
`

type AddProtocolPrecautionToProtocolParams struct {
	ProtocolID   uuid.UUID `json:"protocol_id"`
	PrecautionID uuid.UUID `json:"precaution_id"`
}

func (q *Queries) AddProtocolPrecautionToProtocol(ctx context.Context, arg AddProtocolPrecautionToProtocolParams) error {
	_, err := q.db.ExecContext(ctx, addProtocolPrecautionToProtocol, arg.ProtocolID, arg.PrecautionID)
	return err
}

const createProtocolCaution = `-- name: CreateProtocolCaution :one
INSERT INTO protocol_cautions (description)
VALUES ($1) 
RETURNING id, created_at, updated_at, description
`

func (q *Queries) CreateProtocolCaution(ctx context.Context, description string) (ProtocolCaution, error) {
	row := q.db.QueryRowContext(ctx, createProtocolCaution, description)
	var i ProtocolCaution
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
	)
	return i, err
}

const createProtocolPrecaution = `-- name: CreateProtocolPrecaution :one
INSERT INTO protocol_precautions (title, description)
VALUES ($1, $2)    
RETURNING id, created_at, updated_at, title, description
`

type CreateProtocolPrecautionParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
}

func (q *Queries) CreateProtocolPrecaution(ctx context.Context, arg CreateProtocolPrecautionParams) (ProtocolPrecaution, error) {
	row := q.db.QueryRowContext(ctx, createProtocolPrecaution, arg.Title, arg.Description)
	var i ProtocolPrecaution
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
	)
	return i, err
}

const deleteProtocolCaution = `-- name: DeleteProtocolCaution :exec
DELETE FROM protocol_cautions WHERE id = $1
`

func (q *Queries) DeleteProtocolCaution(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProtocolCaution, id)
	return err
}

const deleteProtocolPrecaution = `-- name: DeleteProtocolPrecaution :exec
DELETE FROM protocol_precautions WHERE id = $1
`

func (q *Queries) DeleteProtocolPrecaution(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProtocolPrecaution, id)
	return err
}

const getCautionByIDWithProtocols = `-- name: GetCautionByIDWithProtocols :one
SELECT pec.id, pec.created_at, pec.updated_at, pec.description, ARRAY_AGG(ROW(pecv.protocol_id,p.code)) AS protocol_ids
FROM protocol_cautions pec
JOIN protocol_cautions_values pecv ON pec.id = pecv.caution_id
JOIN protocols p ON pecv.protocol_id = p.id
WHERE pec.id = $1
`

type GetCautionByIDWithProtocolsRow struct {
	ID          uuid.UUID   `json:"id"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
	Description string      `json:"description"`
	ProtocolIds interface{} `json:"protocol_ids"`
}

func (q *Queries) GetCautionByIDWithProtocols(ctx context.Context, id uuid.UUID) (GetCautionByIDWithProtocolsRow, error) {
	row := q.db.QueryRowContext(ctx, getCautionByIDWithProtocols, id)
	var i GetCautionByIDWithProtocolsRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.ProtocolIds,
	)
	return i, err
}

const getCautionWithProtocols = `-- name: GetCautionWithProtocols :many
SELECT pec.id, pec.created_at, pec.updated_at, pec.description, ARRAY_AGG(ROW(pecv.protocol_id,p.code)) AS protocol_ids
FROM protocol_cautions pec
JOIN protocol_cautions_values pecv ON pec.id = pecv.caution_id
JOIN protocols p ON pecv.protocol_id = p.id
GROUP BY pec.id
`

type GetCautionWithProtocolsRow struct {
	ID          uuid.UUID   `json:"id"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
	Description string      `json:"description"`
	ProtocolIds interface{} `json:"protocol_ids"`
}

func (q *Queries) GetCautionWithProtocols(ctx context.Context) ([]GetCautionWithProtocolsRow, error) {
	rows, err := q.db.QueryContext(ctx, getCautionWithProtocols)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCautionWithProtocolsRow{}
	for rows.Next() {
		var i GetCautionWithProtocolsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.ProtocolIds,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPrecautionByIDWithProtocols = `-- name: GetPrecautionByIDWithProtocols :one
SELECT pec.id, pec.created_at, pec.updated_at, pec.title, pec.description, ARRAY_AGG(ROW(pecv.protocol_id,p.code)) AS protocol_ids
FROM protocol_precautions pec
JOIN protocol_precautions_values pecv ON pec.id = pecv.precaution_id
JOIN protocols p ON pecv.protocol_id = p.id
WHERE pec.id = $1
`

type GetPrecautionByIDWithProtocolsRow struct {
	ID          uuid.UUID   `json:"id"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
	Title       string      `json:"title"`
	Description string      `json:"description"`
	ProtocolIds interface{} `json:"protocol_ids"`
}

func (q *Queries) GetPrecautionByIDWithProtocols(ctx context.Context, id uuid.UUID) (GetPrecautionByIDWithProtocolsRow, error) {
	row := q.db.QueryRowContext(ctx, getPrecautionByIDWithProtocols, id)
	var i GetPrecautionByIDWithProtocolsRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.ProtocolIds,
	)
	return i, err
}

const getPrecautionWithProtocols = `-- name: GetPrecautionWithProtocols :many
SELECT pec.id, pec.created_at, pec.updated_at, pec.title, pec.description, ARRAY_AGG(ROW(pecv.protocol_id,p.code)) AS protocol_ids
FROM protocol_precautions pec
JOIN protocol_precautions_values pecv ON pec.id = pecv.precaution_id
JOIN protocols p ON pecv.protocol_id = p.id
GROUP BY pec.id
`

type GetPrecautionWithProtocolsRow struct {
	ID          uuid.UUID   `json:"id"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
	Title       string      `json:"title"`
	Description string      `json:"description"`
	ProtocolIds interface{} `json:"protocol_ids"`
}

func (q *Queries) GetPrecautionWithProtocols(ctx context.Context) ([]GetPrecautionWithProtocolsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPrecautionWithProtocols)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPrecautionWithProtocolsRow{}
	for rows.Next() {
		var i GetPrecautionWithProtocolsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.ProtocolIds,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProtocolCautionByDescription = `-- name: GetProtocolCautionByDescription :one
SELECT id, created_at, updated_at, description FROM protocol_cautions WHERE description = $1
`

func (q *Queries) GetProtocolCautionByDescription(ctx context.Context, description string) (ProtocolCaution, error) {
	row := q.db.QueryRowContext(ctx, getProtocolCautionByDescription, description)
	var i ProtocolCaution
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
	)
	return i, err
}

const getProtocolCautionByID = `-- name: GetProtocolCautionByID :one
SELECT id, created_at, updated_at, description FROM protocol_cautions WHERE id = $1
`

func (q *Queries) GetProtocolCautionByID(ctx context.Context, id uuid.UUID) (ProtocolCaution, error) {
	row := q.db.QueryRowContext(ctx, getProtocolCautionByID, id)
	var i ProtocolCaution
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
	)
	return i, err
}

const getProtocolCautionsByProtocol = `-- name: GetProtocolCautionsByProtocol :many
SELECT c.id, c.created_at, c.updated_at, c.description FROM protocol_cautions c JOIN protocol_cautions_values v ON c.id = v.caution_id WHERE v.protocol_id = $1
`

func (q *Queries) GetProtocolCautionsByProtocol(ctx context.Context, protocolID uuid.UUID) ([]ProtocolCaution, error) {
	rows, err := q.db.QueryContext(ctx, getProtocolCautionsByProtocol, protocolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProtocolCaution{}
	for rows.Next() {
		var i ProtocolCaution
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProtocolPrecautionByID = `-- name: GetProtocolPrecautionByID :one
SELECT id, created_at, updated_at, title, description FROM protocol_precautions WHERE id = $1
`

func (q *Queries) GetProtocolPrecautionByID(ctx context.Context, id uuid.UUID) (ProtocolPrecaution, error) {
	row := q.db.QueryRowContext(ctx, getProtocolPrecautionByID, id)
	var i ProtocolPrecaution
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
	)
	return i, err
}

const getProtocolPrecautionByTitleAndDescription = `-- name: GetProtocolPrecautionByTitleAndDescription :one
SELECT id, created_at, updated_at, title, description FROM protocol_precautions WHERE title = $1 AND description = $2
`

type GetProtocolPrecautionByTitleAndDescriptionParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
}

func (q *Queries) GetProtocolPrecautionByTitleAndDescription(ctx context.Context, arg GetProtocolPrecautionByTitleAndDescriptionParams) (ProtocolPrecaution, error) {
	row := q.db.QueryRowContext(ctx, getProtocolPrecautionByTitleAndDescription, arg.Title, arg.Description)
	var i ProtocolPrecaution
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
	)
	return i, err
}

const getProtocolPrecautionsByProtocol = `-- name: GetProtocolPrecautionsByProtocol :many
SELECT p.id, p.created_at, p.updated_at, p.title, p.description FROM protocol_precautions p JOIN protocol_precautions_values v ON p.id = v.precaution_id WHERE v.protocol_id = $1
`

func (q *Queries) GetProtocolPrecautionsByProtocol(ctx context.Context, protocolID uuid.UUID) ([]ProtocolPrecaution, error) {
	rows, err := q.db.QueryContext(ctx, getProtocolPrecautionsByProtocol, protocolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProtocolPrecaution{}
	for rows.Next() {
		var i ProtocolPrecaution
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeProtocolCautionFromProtocol = `-- name: RemoveProtocolCautionFromProtocol :exec
DELETE FROM protocol_cautions_values WHERE protocol_id = $1 AND caution_id = $2
`

type RemoveProtocolCautionFromProtocolParams struct {
	ProtocolID uuid.UUID `json:"protocol_id"`
	CautionID  uuid.UUID `json:"caution_id"`
}

func (q *Queries) RemoveProtocolCautionFromProtocol(ctx context.Context, arg RemoveProtocolCautionFromProtocolParams) error {
	_, err := q.db.ExecContext(ctx, removeProtocolCautionFromProtocol, arg.ProtocolID, arg.CautionID)
	return err
}

const removeProtocolPrecautionFromProtocol = `-- name: RemoveProtocolPrecautionFromProtocol :exec
DELETE FROM protocol_precautions_values WHERE protocol_id = $1 AND precaution_id = $2
`

type RemoveProtocolPrecautionFromProtocolParams struct {
	ProtocolID   uuid.UUID `json:"protocol_id"`
	PrecautionID uuid.UUID `json:"precaution_id"`
}

func (q *Queries) RemoveProtocolPrecautionFromProtocol(ctx context.Context, arg RemoveProtocolPrecautionFromProtocolParams) error {
	_, err := q.db.ExecContext(ctx, removeProtocolPrecautionFromProtocol, arg.ProtocolID, arg.PrecautionID)
	return err
}

const updateProtocolCaution = `-- name: UpdateProtocolCaution :one
UPDATE protocol_cautions SET description = $2 WHERE id = $1 RETURNING id, created_at, updated_at, description
`

type UpdateProtocolCautionParams struct {
	ID          uuid.UUID `json:"id"`
	Description string    `json:"description"`
}

func (q *Queries) UpdateProtocolCaution(ctx context.Context, arg UpdateProtocolCautionParams) (ProtocolCaution, error) {
	row := q.db.QueryRowContext(ctx, updateProtocolCaution, arg.ID, arg.Description)
	var i ProtocolCaution
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
	)
	return i, err
}

const updateProtocolPrecaution = `-- name: UpdateProtocolPrecaution :one
UPDATE protocol_precautions SET title = $2, description = $3 WHERE id = $1 RETURNING id, created_at, updated_at, title, description
`

type UpdateProtocolPrecautionParams struct {
	ID          uuid.UUID `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
}

func (q *Queries) UpdateProtocolPrecaution(ctx context.Context, arg UpdateProtocolPrecautionParams) (ProtocolPrecaution, error) {
	row := q.db.QueryRowContext(ctx, updateProtocolPrecaution, arg.ID, arg.Title, arg.Description)
	var i ProtocolPrecaution
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
	)
	return i, err
}

const upsertCaution = `-- name: UpsertCaution :one
INSERT INTO protocol_cautions (id, description)
VALUES ($1, $2)
ON CONFLICT (id) DO UPDATE
SET description = EXCLUDED.description,
    updated_at = NOW()
RETURNING id, created_at, updated_at, description
`

type UpsertCautionParams struct {
	ID          uuid.UUID `json:"id"`
	Description string    `json:"description"`
}

func (q *Queries) UpsertCaution(ctx context.Context, arg UpsertCautionParams) (ProtocolCaution, error) {
	row := q.db.QueryRowContext(ctx, upsertCaution, arg.ID, arg.Description)
	var i ProtocolCaution
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
	)
	return i, err
}

const upsertPrecaution = `-- name: UpsertPrecaution :one
INSERT INTO protocol_precautions (id,title, description)
VALUES ($1, $2, $3)
ON CONFLICT (id) DO UPDATE
SET description = EXCLUDED.description,
    title = EXCLUDED.title,
    updated_at = NOW()
RETURNING id, created_at, updated_at, title, description
`

type UpsertPrecautionParams struct {
	ID          uuid.UUID `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
}

func (q *Queries) UpsertPrecaution(ctx context.Context, arg UpsertPrecautionParams) (ProtocolPrecaution, error) {
	row := q.db.QueryRowContext(ctx, upsertPrecaution, arg.ID, arg.Title, arg.Description)
	var i ProtocolPrecaution
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
	)
	return i, err
}
