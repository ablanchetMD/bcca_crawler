// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at)
VALUES (    
    $1,
    $2,
    $3,
    $4,
    $5    
)
RETURNING token, created_at, updated_at, expires_at, revoked_at, user_id
`

type CreateRefreshTokenParams struct {
	Token     string    `json:"token"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	UserID    uuid.UUID `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken,
		arg.Token,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.ExpiresAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.UserID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, password,role)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, created_at, updated_at, email, role, is_verified, deleted_at, deleted_by, last_active, password
`

type CreateUserParams struct {
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Email     string    `json:"email"`
	Password  string    `json:"password"`
	Role      string    `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Email,
		arg.Password,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Role,
		&i.IsVerified,
		&i.DeletedAt,
		&i.DeletedBy,
		&i.LastActive,
		&i.Password,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, id)
	return err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUsers)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT rt.token, rt.created_at, rt.updated_at, rt.expires_at, rt.revoked_at, rt.user_id, u.role
FROM refresh_tokens rt
INNER JOIN users u ON rt.user_id = u.id
WHERE rt.token = $1
`

type GetRefreshTokenRow struct {
	Token     string       `json:"token"`
	CreatedAt time.Time    `json:"created_at"`
	UpdatedAt time.Time    `json:"updated_at"`
	ExpiresAt time.Time    `json:"expires_at"`
	RevokedAt sql.NullTime `json:"revoked_at"`
	UserID    uuid.UUID    `json:"user_id"`
	Role      string       `json:"role"`
}

func (q *Queries) GetRefreshToken(ctx context.Context, token string) (GetRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, token)
	var i GetRefreshTokenRow
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.UserID,
		&i.Role,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, email, role, is_verified, deleted_at, deleted_by, last_active, password FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Role,
		&i.IsVerified,
		&i.DeletedAt,
		&i.DeletedBy,
		&i.LastActive,
		&i.Password,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, email, role, is_verified, deleted_at, deleted_by, last_active, password FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Role,
		&i.IsVerified,
		&i.DeletedAt,
		&i.DeletedBy,
		&i.LastActive,
		&i.Password,
	)
	return i, err
}

const getUserRoleByID = `-- name: GetUserRoleByID :one
SELECT role FROM users WHERE id = $1
`

func (q *Queries) GetUserRoleByID(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserRoleByID, id)
	var role string
	err := row.Scan(&role)
	return role, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, created_at, updated_at, email, role, is_verified, deleted_at, deleted_by, last_active, password FROM users
ORDER BY email ASC
LIMIT $1 OFFSET $2
`

type GetUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.Role,
			&i.IsVerified,
			&i.DeletedAt,
			&i.DeletedBy,
			&i.LastActive,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByRole = `-- name: GetUsersByRole :many
SELECT id, created_at, updated_at, email, role, is_verified, deleted_at, deleted_by, last_active, password FROM users
WHERE role = $1
ORDER BY email ASC
LIMIT $2 OFFSET $3
`

type GetUsersByRoleParams struct {
	Role   string `json:"role"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) GetUsersByRole(ctx context.Context, arg GetUsersByRoleParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByRole, arg.Role, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.Role,
			&i.IsVerified,
			&i.DeletedAt,
			&i.DeletedBy,
			&i.LastActive,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :one
UPDATE refresh_tokens
SET revoked_at = NOW(), updated_at = NOW()
WHERE token = $1
RETURNING token, created_at, updated_at, expires_at, revoked_at, user_id
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, revokeRefreshToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.UserID,
	)
	return i, err
}

const revokeRefreshTokenByUserId = `-- name: RevokeRefreshTokenByUserId :many
UPDATE refresh_tokens
SET revoked_at = NOW(), updated_at = NOW()
WHERE user_id = $1
RETURNING token, created_at, updated_at, expires_at, revoked_at, user_id
`

func (q *Queries) RevokeRefreshTokenByUserId(ctx context.Context, userID uuid.UUID) ([]RefreshToken, error) {
	rows, err := q.db.QueryContext(ctx, revokeRefreshTokenByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RefreshToken{}
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.Token,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
			&i.RevokedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    updated_at = NOW(),
    email = COALESCE($2, email),
    password = COALESCE($3, password),
    role = COALESCE($4, role),
    is_verified = COALESCE($5, is_verified),
    deleted_at = COALESCE($6, deleted_at),
    deleted_by = COALESCE($7, deleted_by),
    last_active = COALESCE($8, last_active)
WHERE id = $1
    AND (
        $2 IS DISTINCT FROM email
        OR $3 IS DISTINCT FROM password
        OR $4 IS DISTINCT FROM role
        OR $5 IS DISTINCT FROM is_verified
        OR $6 IS DISTINCT FROM deleted_at
        OR $7 IS DISTINCT FROM deleted_by
        OR $8 IS DISTINCT FROM last_active        
    )
RETURNING id, created_at, updated_at, email, role, is_verified, deleted_at, deleted_by, last_active, password
`

type UpdateUserParams struct {
	ID         uuid.UUID     `json:"id"`
	Email      string        `json:"email"`
	Password   string        `json:"password"`
	Role       string        `json:"role"`
	IsVerified bool          `json:"is_verified"`
	DeletedAt  sql.NullTime  `json:"deleted_at"`
	DeletedBy  uuid.NullUUID `json:"deleted_by"`
	LastActive sql.NullTime  `json:"last_active"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.Role,
		arg.IsVerified,
		arg.DeletedAt,
		arg.DeletedBy,
		arg.LastActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Role,
		&i.IsVerified,
		&i.DeletedAt,
		&i.DeletedBy,
		&i.LastActive,
		&i.Password,
	)
	return i, err
}
