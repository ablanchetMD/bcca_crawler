// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: eligibility.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const deleteEligibilityCriteria = `-- name: DeleteEligibilityCriteria :exec
DELETE FROM protocol_eligibility_criteria
WHERE id = $1
`

func (q *Queries) DeleteEligibilityCriteria(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEligibilityCriteria, id)
	return err
}

const getEligibilityByProtocol = `-- name: GetEligibilityByProtocol :many
SELECT c.id, c.type, c.description
FROM protocol_eligibility_criteria c
JOIN protocol_eligibility_criteria_values v ON c.id = v.criteria_id
WHERE v.protocol_id = $1
`

type GetEligibilityByProtocolRow struct {
	ID          uuid.UUID
	Type        string
	Description string
}

func (q *Queries) GetEligibilityByProtocol(ctx context.Context, protocolID uuid.UUID) ([]GetEligibilityByProtocolRow, error) {
	rows, err := q.db.QueryContext(ctx, getEligibilityByProtocol, protocolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEligibilityByProtocolRow
	for rows.Next() {
		var i GetEligibilityByProtocolRow
		if err := rows.Scan(&i.ID, &i.Type, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEligibilityCriteriaBy = `-- name: GetEligibilityCriteriaBy :many
SELECT id, created_at, updated_at, type, description FROM protocol_eligibility_criteria
WHERE type = $1
`

func (q *Queries) GetEligibilityCriteriaBy(ctx context.Context, type_ string) ([]ProtocolEligibilityCriterium, error) {
	rows, err := q.db.QueryContext(ctx, getEligibilityCriteriaBy, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProtocolEligibilityCriterium
	for rows.Next() {
		var i ProtocolEligibilityCriterium
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEligibilityCriteriaByID = `-- name: GetEligibilityCriteriaByID :one
SELECT id, created_at, updated_at, type, description FROM protocol_eligibility_criteria
WHERE id = $1
`

func (q *Queries) GetEligibilityCriteriaByID(ctx context.Context, id uuid.UUID) (ProtocolEligibilityCriterium, error) {
	row := q.db.QueryRowContext(ctx, getEligibilityCriteriaByID, id)
	var i ProtocolEligibilityCriterium
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Type,
		&i.Description,
	)
	return i, err
}

const insertEligibilityCriteria = `-- name: InsertEligibilityCriteria :one
INSERT INTO protocol_eligibility_criteria (type, description)
VALUES ($1, $2)
RETURNING id, created_at, updated_at, type, description
`

type InsertEligibilityCriteriaParams struct {
	Type        string
	Description string
}

func (q *Queries) InsertEligibilityCriteria(ctx context.Context, arg InsertEligibilityCriteriaParams) (ProtocolEligibilityCriterium, error) {
	row := q.db.QueryRowContext(ctx, insertEligibilityCriteria, arg.Type, arg.Description)
	var i ProtocolEligibilityCriterium
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Type,
		&i.Description,
	)
	return i, err
}

const insertManyEligibilityCriteria = `-- name: InsertManyEligibilityCriteria :many
INSERT INTO protocol_eligibility_criteria (type, description)
VALUES ($1::TEXT[], $2::TEXT[])
ON CONFLICT DO NOTHING
RETURNING id, created_at, updated_at, type, description
`

type InsertManyEligibilityCriteriaParams struct {
	Column1 []string
	Column2 []string
}

func (q *Queries) InsertManyEligibilityCriteria(ctx context.Context, arg InsertManyEligibilityCriteriaParams) ([]ProtocolEligibilityCriterium, error) {
	rows, err := q.db.QueryContext(ctx, insertManyEligibilityCriteria, pq.Array(arg.Column1), pq.Array(arg.Column2))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProtocolEligibilityCriterium
	for rows.Next() {
		var i ProtocolEligibilityCriterium
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const linkEligibilityToProtocol = `-- name: LinkEligibilityToProtocol :exec
INSERT INTO protocol_eligibility_criteria_values (protocol_id, criteria_id)
VALUES ($1::UUID[], $2::UUID[])
ON CONFLICT DO NOTHING
`

type LinkEligibilityToProtocolParams struct {
	Column1 []uuid.UUID
	Column2 []uuid.UUID
}

func (q *Queries) LinkEligibilityToProtocol(ctx context.Context, arg LinkEligibilityToProtocolParams) error {
	_, err := q.db.ExecContext(ctx, linkEligibilityToProtocol, pq.Array(arg.Column1), pq.Array(arg.Column2))
	return err
}

const unlinkEligibilityFromProtocol = `-- name: UnlinkEligibilityFromProtocol :exec
DELETE FROM protocol_eligibility_criteria_values
WHERE protocol_id = $1 AND criteria_id = $2
`

type UnlinkEligibilityFromProtocolParams struct {
	ProtocolID uuid.UUID
	CriteriaID uuid.UUID
}

func (q *Queries) UnlinkEligibilityFromProtocol(ctx context.Context, arg UnlinkEligibilityFromProtocolParams) error {
	_, err := q.db.ExecContext(ctx, unlinkEligibilityFromProtocol, arg.ProtocolID, arg.CriteriaID)
	return err
}

const updateEligibilityCriteria = `-- name: UpdateEligibilityCriteria :one
UPDATE protocol_eligibility_criteria
SET
    updated_at = NOW(),
    type = $2,
    description = $3
WHERE id = $1
RETURNING id, created_at, updated_at, type, description
`

type UpdateEligibilityCriteriaParams struct {
	ID          uuid.UUID
	Type        string
	Description string
}

func (q *Queries) UpdateEligibilityCriteria(ctx context.Context, arg UpdateEligibilityCriteriaParams) (ProtocolEligibilityCriterium, error) {
	row := q.db.QueryRowContext(ctx, updateEligibilityCriteria, arg.ID, arg.Type, arg.Description)
	var i ProtocolEligibilityCriterium
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Type,
		&i.Description,
	)
	return i, err
}
