// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: toxicities.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addToxicity = `-- name: AddToxicity :one
INSERT INTO toxicities (title, category, description)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, title, category, description
`

type AddToxicityParams struct {
	Title       string
	Category    string
	Description string
}

func (q *Queries) AddToxicity(ctx context.Context, arg AddToxicityParams) (Toxicity, error) {
	row := q.db.QueryRowContext(ctx, addToxicity, arg.Title, arg.Category, arg.Description)
	var i Toxicity
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Category,
		&i.Description,
	)
	return i, err
}

const addToxicityGrade = `-- name: AddToxicityGrade :one
INSERT INTO toxicity_grades (grade, description, toxicity_id)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, grade, description, toxicity_id
`

type AddToxicityGradeParams struct {
	Grade       string
	Description string
	ToxicityID  uuid.UUID
}

func (q *Queries) AddToxicityGrade(ctx context.Context, arg AddToxicityGradeParams) (ToxicityGrade, error) {
	row := q.db.QueryRowContext(ctx, addToxicityGrade, arg.Grade, arg.Description, arg.ToxicityID)
	var i ToxicityGrade
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Grade,
		&i.Description,
		&i.ToxicityID,
	)
	return i, err
}

const addToxicityModification = `-- name: AddToxicityModification :one
INSERT INTO protocol_tox_modifications (adjustment, toxicity_grade_id, protocol_id)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, adjustment, toxicity_grade_id, protocol_id
`

type AddToxicityModificationParams struct {
	Adjustment      string
	ToxicityGradeID uuid.UUID
	ProtocolID      uuid.UUID
}

func (q *Queries) AddToxicityModification(ctx context.Context, arg AddToxicityModificationParams) (ProtocolToxModification, error) {
	row := q.db.QueryRowContext(ctx, addToxicityModification, arg.Adjustment, arg.ToxicityGradeID, arg.ProtocolID)
	var i ProtocolToxModification
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Adjustment,
		&i.ToxicityGradeID,
		&i.ProtocolID,
	)
	return i, err
}

const getToxicity = `-- name: GetToxicity :one
SELECT id, created_at, updated_at, title, category, description FROM toxicities
WHERE id = $1
`

func (q *Queries) GetToxicity(ctx context.Context, id uuid.UUID) (Toxicity, error) {
	row := q.db.QueryRowContext(ctx, getToxicity, id)
	var i Toxicity
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Category,
		&i.Description,
	)
	return i, err
}

const getToxicityByName = `-- name: GetToxicityByName :one
SELECT id, created_at, updated_at, title, category, description FROM toxicities
WHERE title = $1
`

func (q *Queries) GetToxicityByName(ctx context.Context, title string) (Toxicity, error) {
	row := q.db.QueryRowContext(ctx, getToxicityByName, title)
	var i Toxicity
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Category,
		&i.Description,
	)
	return i, err
}

const getToxicityGrade = `-- name: GetToxicityGrade :one
SELECT id, created_at, updated_at, grade, description, toxicity_id FROM toxicity_grades
WHERE id = $1
`

func (q *Queries) GetToxicityGrade(ctx context.Context, id uuid.UUID) (ToxicityGrade, error) {
	row := q.db.QueryRowContext(ctx, getToxicityGrade, id)
	var i ToxicityGrade
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Grade,
		&i.Description,
		&i.ToxicityID,
	)
	return i, err
}

const getToxicityGradeByGrade = `-- name: GetToxicityGradeByGrade :one
SELECT id, created_at, updated_at, grade, description, toxicity_id FROM toxicity_grades
WHERE grade = $1 AND toxicity_id = $2
`

type GetToxicityGradeByGradeParams struct {
	Grade      string
	ToxicityID uuid.UUID
}

func (q *Queries) GetToxicityGradeByGrade(ctx context.Context, arg GetToxicityGradeByGradeParams) (ToxicityGrade, error) {
	row := q.db.QueryRowContext(ctx, getToxicityGradeByGrade, arg.Grade, arg.ToxicityID)
	var i ToxicityGrade
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Grade,
		&i.Description,
		&i.ToxicityID,
	)
	return i, err
}

const getToxicityModificationByProtocol = `-- name: GetToxicityModificationByProtocol :many
SELECT 
    protocol_tox_modifications.id, protocol_tox_modifications.created_at, protocol_tox_modifications.updated_at, protocol_tox_modifications.adjustment, protocol_tox_modifications.toxicity_grade_id, protocol_tox_modifications.protocol_id, 
    toxicities.title AS toxicity_title, 
    toxicity_grades.description AS toxicity_grade_description, 
    toxicity_grades.grade AS toxicity_grade
FROM protocol_tox_modifications
JOIN toxicity_grades ON protocol_tox_modifications.toxicity_grade_id = toxicity_grades.id
JOIN toxicities ON toxicity_grades.toxicity_id = toxicities.id
WHERE protocol_tox_modifications.protocol_id = $1
`

type GetToxicityModificationByProtocolRow struct {
	ID                       uuid.UUID
	CreatedAt                time.Time
	UpdatedAt                time.Time
	Adjustment               string
	ToxicityGradeID          uuid.UUID
	ProtocolID               uuid.UUID
	ToxicityTitle            string
	ToxicityGradeDescription string
	ToxicityGrade            string
}

func (q *Queries) GetToxicityModificationByProtocol(ctx context.Context, protocolID uuid.UUID) ([]GetToxicityModificationByProtocolRow, error) {
	rows, err := q.db.QueryContext(ctx, getToxicityModificationByProtocol, protocolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetToxicityModificationByProtocolRow
	for rows.Next() {
		var i GetToxicityModificationByProtocolRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Adjustment,
			&i.ToxicityGradeID,
			&i.ProtocolID,
			&i.ToxicityTitle,
			&i.ToxicityGradeDescription,
			&i.ToxicityGrade,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getToxicityModificationsByTreatment = `-- name: GetToxicityModificationsByTreatment :many
SELECT id, created_at, updated_at, adjustment, toxicity_grade_id, protocol_id FROM protocol_tox_modifications
WHERE protocol_id = $1
`

func (q *Queries) GetToxicityModificationsByTreatment(ctx context.Context, protocolID uuid.UUID) ([]ProtocolToxModification, error) {
	rows, err := q.db.QueryContext(ctx, getToxicityModificationsByTreatment, protocolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProtocolToxModification
	for rows.Next() {
		var i ProtocolToxModification
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Adjustment,
			&i.ToxicityGradeID,
			&i.ProtocolID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeToxicity = `-- name: RemoveToxicity :exec
DELETE FROM toxicities
WHERE id = $1
`

func (q *Queries) RemoveToxicity(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeToxicity, id)
	return err
}

const removeToxicityGrade = `-- name: RemoveToxicityGrade :exec
DELETE FROM toxicity_grades
WHERE id = $1
`

func (q *Queries) RemoveToxicityGrade(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeToxicityGrade, id)
	return err
}

const removeToxicityModification = `-- name: RemoveToxicityModification :exec
DELETE FROM protocol_tox_modifications
WHERE id = $1
`

func (q *Queries) RemoveToxicityModification(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeToxicityModification, id)
	return err
}

const updateToxicity = `-- name: UpdateToxicity :one
UPDATE toxicities
SET
    updated_at = NOW(),
    title = $2,
    category = $3,
    description = $4
WHERE id = $1
RETURNING id, created_at, updated_at, title, category, description
`

type UpdateToxicityParams struct {
	ID          uuid.UUID
	Title       string
	Category    string
	Description string
}

func (q *Queries) UpdateToxicity(ctx context.Context, arg UpdateToxicityParams) (Toxicity, error) {
	row := q.db.QueryRowContext(ctx, updateToxicity,
		arg.ID,
		arg.Title,
		arg.Category,
		arg.Description,
	)
	var i Toxicity
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Category,
		&i.Description,
	)
	return i, err
}

const updateToxicityGrade = `-- name: UpdateToxicityGrade :one
UPDATE toxicity_grades
SET
    updated_at = NOW(),
    grade = $2,
    description = $3,
    toxicity_id = $4
WHERE id = $1
RETURNING id, created_at, updated_at, grade, description, toxicity_id
`

type UpdateToxicityGradeParams struct {
	ID          uuid.UUID
	Grade       string
	Description string
	ToxicityID  uuid.UUID
}

func (q *Queries) UpdateToxicityGrade(ctx context.Context, arg UpdateToxicityGradeParams) (ToxicityGrade, error) {
	row := q.db.QueryRowContext(ctx, updateToxicityGrade,
		arg.ID,
		arg.Grade,
		arg.Description,
		arg.ToxicityID,
	)
	var i ToxicityGrade
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Grade,
		&i.Description,
		&i.ToxicityID,
	)
	return i, err
}

const updateToxicityModification = `-- name: UpdateToxicityModification :one
UPDATE protocol_tox_modifications
SET
    updated_at = NOW(),
    adjustment = $2,
    toxicity_grade_id = $3,
    protocol_id = $4
WHERE id = $1
RETURNING id, created_at, updated_at, adjustment, toxicity_grade_id, protocol_id
`

type UpdateToxicityModificationParams struct {
	ID              uuid.UUID
	Adjustment      string
	ToxicityGradeID uuid.UUID
	ProtocolID      uuid.UUID
}

func (q *Queries) UpdateToxicityModification(ctx context.Context, arg UpdateToxicityModificationParams) (ProtocolToxModification, error) {
	row := q.db.QueryRowContext(ctx, updateToxicityModification,
		arg.ID,
		arg.Adjustment,
		arg.ToxicityGradeID,
		arg.ProtocolID,
	)
	var i ProtocolToxModification
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Adjustment,
		&i.ToxicityGradeID,
		&i.ProtocolID,
	)
	return i, err
}
